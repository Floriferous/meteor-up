{"version":3,"sources":["../src/scrub-config.js"],"names":["_configScrubbers","registerScrubber","scrubber","push","utils","scrubUrl","url","protocol","auth","hostname","port","path","hash","href","domains","split","pop","forEach","scrubConfig","_config","config"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEO,MAAMA,gBAAgB,GAAG,EAAzB;;;AAEA,SAASC,gBAAT,CAA0BC,QAA1B,EAAoC;AACzCF,EAAAA,gBAAgB,CAACG,IAAjB,CAAsBD,QAAtB;AACD;;AAEM,MAAME,KAAK,GAAG;AACnBC,EAAAA,QAAQ,CAACC,GAAD,EAAM;AACZ,UAAM;AACJC,MAAAA,QADI;AAEJC,MAAAA,IAFI;AAGJC,MAAAA,QAHI;AAIJC,MAAAA,IAJI;AAKJC,MAAAA,IALI;AAMJC,MAAAA;AANI,QAOF,gBAAMN,GAAN,CAPJ;AASA,QAAIO,IAAI,GAAI,GAAEN,QAAS,IAAvB;;AAEA,QAAIC,IAAJ,EAAU;AACRK,MAAAA,IAAI,IAAI,YAAR;AACD;;AAED,UAAMC,OAAO,GAAGL,QAAQ,CAACM,KAAT,CAAe,GAAf,CAAhB;AACAD,IAAAA,OAAO,CAACE,GAAR;AACAF,IAAAA,OAAO,CAACE,GAAR;AACAF,IAAAA,OAAO,CAACG,OAAR,CAAgB,MAAM;AACpBJ,MAAAA,IAAI,IAAI,YAAR;AACD,KAFD;AAGAA,IAAAA,IAAI,IAAI,UAAR;;AAEA,QAAIH,IAAJ,EAAU;AACRG,MAAAA,IAAI,IAAK,IAAGH,IAAK,EAAjB;AACD;;AAED,QAAIC,IAAI,IAAIA,IAAI,KAAK,GAArB,EAA0B;AACxBE,MAAAA,IAAI,IAAIF,IAAR;AACD;;AACD,QAAIC,IAAJ,EAAU;AACRC,MAAAA,IAAI,IAAID,IAAR;AACD;;AAED,WAAOC,IAAP;AACD;;AArCkB,CAAd;;;AAwCA,SAASK,WAAT,CAAqBC,OAArB,EAA8B;AACnC,MAAIC,MAAM,GAAG,uBAAUD,OAAV,CAAb;;AACAnB,EAAAA,gBAAgB,CAACiB,OAAjB,CAAyBf,QAAQ,IAAI;AACnCkB,IAAAA,MAAM,GAAGlB,QAAQ,CAACkB,MAAD,EAAShB,KAAT,CAAjB;AACD,GAFD;;AAIA,SAAOgB,MAAP;AACD","sourcesContent":["import { cloneDeep } from 'lodash';\nimport { parse } from 'url';\n\nexport const _configScrubbers = [];\n\nexport function registerScrubber(scrubber) {\n  _configScrubbers.push(scrubber);\n}\n\nexport const utils = {\n  scrubUrl(url) {\n    const {\n      protocol,\n      auth,\n      hostname,\n      port,\n      path,\n      hash\n    } = parse(url);\n\n    let href = `${protocol}//`;\n\n    if (auth) {\n      href += 'user:pass@';\n    }\n\n    const domains = hostname.split('.');\n    domains.pop();\n    domains.pop();\n    domains.forEach(() => {\n      href += 'subdomain.';\n    });\n    href += 'host.com';\n\n    if (port) {\n      href += `:${port}`;\n    }\n\n    if (path && path !== '/') {\n      href += path;\n    }\n    if (hash) {\n      href += hash;\n    }\n\n    return href;\n  }\n};\n\nexport function scrubConfig(_config) {\n  let config = cloneDeep(_config);\n  _configScrubbers.forEach(scrubber => {\n    config = scrubber(config, utils);\n  });\n\n  return config;\n}\n"],"file":"scrub-config.js"}