{"version":3,"sources":["../../src/validate/servers.js"],"names":["schema","joi","object","keys","pattern","host","alternatives","string","trim","required","username","pem","password","opts","port","number","privateIp","validateServers","servers","details","result","validate","VALIDATE_OPTIONS","Object","forEach","key","server","indexOf","length","push","message","path"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;AACA,MAAMA,MAAM,GAAGC,aAAIC,MAAJ,GAAaC,IAAb,GAAoBC,OAApB,CAA4B,IAA5B,EAAkC;AAC/CC,EAAAA,IAAI,EAAEJ,aACHK,YADG,CAEFL,aAAIM,MAAJ,GAAaC,IAAb,EAFE,EAIHC,QAJG,EADyC;AAM/CC,EAAAA,QAAQ,EAAET,aAAIM,MAAJ,GAAaE,QAAb,EANqC;AAO/CE,EAAAA,GAAG,EAAEV,aAAIM,MAAJ,GAAaC,IAAb,EAP0C;AAQ/CI,EAAAA,QAAQ,EAAEX,aAAIM,MAAJ,EARqC;AAS/CM,EAAAA,IAAI,EAAEZ,aAAIC,MAAJ,GAAaC,IAAb,CAAkB;AACtBW,IAAAA,IAAI,EAAEb,aAAIc,MAAJ;AADgB,GAAlB,CATyC;AAY/CC,EAAAA,SAAS,EAAEf,aAAIM,MAAJ;AAZoC,CAAlC,CAAf;;AAee,SAASU,eAAT,CAAyBC,OAAzB,EAAkC;AAC/C,MAAIC,OAAO,GAAG,EAAd;;AACA,QAAMC,MAAM,GAAGnB,aAAIoB,QAAJ,CAAaH,OAAb,EAAsBlB,MAAtB,EAA8BsB,uBAA9B,CAAf;;AACAH,EAAAA,OAAO,GAAG,gCAAoBA,OAApB,EAA6BC,MAA7B,CAAV;AAEAG,EAAAA,MAAM,CAACpB,IAAP,CAAYe,OAAZ,EAAqBM,OAArB,CAA6BC,GAAG,IAAI;AAClC,UAAMC,MAAM,GAAGR,OAAO,CAACO,GAAD,CAAtB;;AACA,QAAIC,MAAM,CAACf,GAAP,IAAce,MAAM,CAACf,GAAP,CAAWgB,OAAX,CAAmB,MAAnB,MAA+BD,MAAM,CAACf,GAAP,CAAWiB,MAAX,GAAoB,CAArE,EAAwE;AACtET,MAAAA,OAAO,CAACU,IAAR,CAAa;AACXC,QAAAA,OAAO,EAAE,yFADE;AAEXC,QAAAA,IAAI,EAAG,GAAEN,GAAI;AAFF,OAAb;AAID;AACF,GARD;AAUA,SAAO,wBAAYN,OAAZ,EAAqB,SAArB,CAAP;AACD","sourcesContent":["import { addLocation, combineErrorDetails, VALIDATE_OPTIONS } from './utils';\nimport joi from '@hapi/joi';\n\n// The regexp used matches everything\nconst schema = joi.object().keys().pattern(/.*/, {\n  host: joi\n    .alternatives(\n      joi.string().trim()\n    )\n    .required(),\n  username: joi.string().required(),\n  pem: joi.string().trim(),\n  password: joi.string(),\n  opts: joi.object().keys({\n    port: joi.number()\n  }),\n  privateIp: joi.string()\n});\n\nexport default function validateServers(servers) {\n  let details = [];\n  const result = joi.validate(servers, schema, VALIDATE_OPTIONS);\n  details = combineErrorDetails(details, result);\n\n  Object.keys(servers).forEach(key => {\n    const server = servers[key];\n    if (server.pem && server.pem.indexOf('.pub') === server.pem.length - 4) {\n      details.push({\n        message: 'Needs to be a path to a private key. The file extension \".pub\" is used for public keys.',\n        path: `${key}.pem`\n      });\n    }\n  });\n\n  return addLocation(details, 'servers');\n}\n"],"file":"servers.js"}