{"version":3,"sources":["../../src/tasks/index.js"],"names":["escapeEnv","env","Array","map","_env","value","Object","keys","reduce","result","key","addCreateService","taskList","image","name","publishedPort","targetPort","envFile","hostname","mode","replicas","constraints","endpointMode","networks","updateFailureAction","updateParallelism","updateDelay","executeScript","script","__dirname","vars","diffEnv","wantedEnv","_currentEnv","toAdd","toRemove","currentEnv","split","entries","toString","push","envAdd","envRemove","ifChanged","current","compareValue","newValue","console","log","addUpdateService","currentService","EndpointSpec","TaskTemplate","UpdateConfig","Spec","containerSpec","ContainerSpec","Env","Image","Hostname","Mode","FailureAction","Delay","Parallelism","addCreateOrUpdateService","tasklist","options","addStopService","addRestartService"],"mappings":"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","sourcesContent":["import { resolvePath } from '../utils';\nimport shellEscape from 'shell-escape';\n\nfunction escapeEnv(env) {\n  if (env instanceof Array) {\n    return env.map(_env => {\n      _env.value = shellEscape([_env.value]);\n\n      return _env;\n    });\n  }\n\n  return Object.keys(env).reduce((result, key) => {\n    result[key] = shellEscape([env[key]]);\n\n    return result;\n  }, {});\n}\n\nexport function addCreateService(taskList, {\n  image,\n  name,\n  publishedPort,\n  targetPort,\n  envFile,\n  env,\n  hostname,\n  mode = 'replicated',\n  replicas,\n  constraints = [],\n  endpointMode = 'vip',\n  networks = [],\n  updateFailureAction = 'rollback',\n  updateParallelism = 0,\n  updateDelay = 0\n  // bind,\n  // log,\n  // volumes,\n  // docker,\n  // hostLabels\n} = {}) {\n  taskList.executeScript(`Start ${name}`, {\n    script: resolvePath(__dirname, 'assets/create-service.sh'),\n    vars: {\n      name,\n      publishedPort,\n      targetPort,\n      envFile,\n      env: escapeEnv(env),\n      image,\n      replicas,\n      hostname,\n      mode,\n      endpointMode,\n      networks,\n      updateFailureAction,\n      updateParallelism,\n      updateDelay: `${updateDelay / 1000}s`,\n      constraints\n    }\n  });\n\n  return taskList;\n}\n\nfunction diffEnv(wantedEnv, _currentEnv) {\n  const toAdd = [];\n  const toRemove = [];\n\n  const currentEnv = _currentEnv.reduce((result, env) => {\n    const [name, value] = env.split('=');\n\n    result[name] = value;\n\n    return result;\n  }, {});\n\n  for (const [name, value] of Object.entries(wantedEnv)) {\n    if (!(name in currentEnv) || currentEnv[name] !== value.toString()) {\n      toAdd.push({name, value});\n    }\n  }\n\n  for (const [name] of Object.entries(currentEnv)) {\n    if (!(name in wantedEnv)) {\n      toRemove.push({name});\n    }\n  }\n\n  return {\n    envAdd: toAdd,\n    envRemove: toRemove\n  };\n}\n\nfunction ifChanged(current, compareValue, newValue) {\n  if (current !== compareValue) {\n    console.log(current, compareValue, newValue);\n\n    return typeof newValue === 'undefined' ? compareValue : newValue;\n  }\n\n  return null;\n}\n\nexport function addUpdateService(taskList, {\n  name,\n  image,\n  env,\n  hostname,\n  endpointMode,\n  updateFailureAction,\n  updateParallelism,\n  updateDelay\n}, currentService) {\n  const {\n    EndpointSpec,\n    TaskTemplate,\n    UpdateConfig\n  } = currentService.Spec;\n  const containerSpec = TaskTemplate.ContainerSpec;\n  const {\n    envAdd,\n    envRemove\n  } = diffEnv(env, containerSpec.Env);\n\n  // TODO: skip running the script if there is nothing to update\n  taskList.executeScript(`Update ${name}`, {\n    script: resolvePath(__dirname, 'assets/update-service.sh'),\n    vars: {\n      image: ifChanged(containerSpec.Image, image),\n      hostname: ifChanged(containerSpec.Hostname, hostname),\n      envAdd: escapeEnv(envAdd),\n      envRemove,\n      name,\n      endpointMode: ifChanged(EndpointSpec.Mode, endpointMode),\n      updateFailureAction: ifChanged(\n        UpdateConfig.FailureAction, updateFailureAction\n      ),\n      updateDelay: ifChanged(\n        UpdateConfig.Delay, updateDelay * 1000000, updateDelay\n      ),\n      updateParallelism: ifChanged(UpdateConfig.Parallelism, updateParallelism)\n    }\n  });\n\n  return taskList;\n}\n\nexport function addCreateOrUpdateService(tasklist, options, currentService) {\n  if (currentService) {\n    return addUpdateService(tasklist, options, currentService);\n  }\n\n  return addCreateService(tasklist, options);\n}\n\nexport function addStopService(taskList, { name }) {\n  taskList.executeScript(`Stop ${name}`, {\n    script: resolvePath(__dirname, 'assets/stop-service.sh'),\n    vars: {\n      name\n    }\n  });\n\n  return taskList;\n}\n\nexport function addRestartService(taskList, { name }) {\n  taskList.executeScript(`Restart ${name}`, {\n    script: resolvePath(__dirname, 'assets/restart-service.sh'),\n    vars: {\n      name\n    }\n  });\n}\n"],"file":"index.js"}