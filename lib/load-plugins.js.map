{"version":3,"sources":["../src/load-plugins.js"],"names":["log","modules","bundledPlugins","fs","readdirSync","__dirname","map","name","path","filter","isDirectoryMupPlugin","loadPlugins","locatePluginDir","configPath","appPath","indexOf","configLocalPath","resolveFrom","silent","mupLocal","require","resolve","e","appLocalPath","globalModules","globalPath","registerPlugin","plugin","module","commands","Object","keys","forEach","key","hooks","validate","validators","entries","property","validator","prepareConfig","scrubConfig","swarmOptions","plugins","console","chalk","red","code","failed","modulePath","moduleDir","statSync","isDirectory"],"mappings":"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","sourcesContent":["import { join, resolve } from 'path';\nimport { moduleNotFoundIsPath, resolvePath } from './utils';\nimport { addPluginValidator } from './validate';\nimport chalk from 'chalk';\nimport debug from 'debug';\nimport fs from 'fs';\nimport globalModules from 'global-modules';\nimport registerCommand from './commands';\nimport { registerHook } from './hooks';\nimport { registerPreparer } from './prepare-config';\nimport { registerScrubber } from './scrub-config';\nimport { registerSwarmOptions } from './swarm-options';\nimport resolveFrom from 'resolve-from';\n\nconst log = debug('mup:plugin-loader');\n\nconst modules = {};\nexport default modules;\n\n// Load all folders in ./plugins as mup plugins.\n// The directory name is the module name.\nconst bundledPlugins = fs\n  .readdirSync(resolve(__dirname, 'plugins'))\n  .map(name => ({ name, path: `./plugins/${name}` }))\n  .filter(isDirectoryMupPlugin);\n\nloadPlugins(bundledPlugins);\n\nexport function locatePluginDir(name, configPath, appPath) {\n  log(`loading plugin ${name}`);\n\n  if (name.indexOf('.') === 0 || name.indexOf('/') === 0 || name.indexOf('~') === 0) {\n    log('plugin name is a path to the plugin');\n\n    return resolvePath(configPath, '../', name);\n  }\n\n  const configLocalPath = resolveFrom.silent(configPath, name);\n  if (configLocalPath) {\n    log('plugin installed locally to config folder');\n\n    return configLocalPath;\n  }\n  try {\n    const mupLocal = require.resolve(name);\n    log('plugin installed locally with mup');\n\n    return mupLocal;\n  } catch (e) {\n    // Continues to next location to resolve from\n  }\n\n  const appLocalPath = resolveFrom.silent(appPath, name);\n  if (appLocalPath) {\n    log('plugin installed locall in app folder');\n\n    return appLocalPath;\n  }\n\n  log(`global install path: ${globalModules}`);\n  const globalPath = resolveFrom.silent(resolve(globalModules, '..'), name);\n  if (globalPath) {\n    log('plugin installed globally');\n\n    return globalPath;\n  }\n  log('plugin not found');\n\n  return name;\n}\n\nfunction registerPlugin(plugin) {\n  if (plugin.module.commands) {\n    Object.keys(plugin.module.commands).forEach(key => {\n      registerCommand(plugin.name, key, plugin.module.commands[key]);\n    });\n  }\n  if (plugin.module.hooks) {\n    Object.keys(plugin.module.hooks).forEach(key => {\n      registerHook(key, plugin.module.hooks[key]);\n    });\n  }\n  if (typeof plugin.module.validate === 'object') {\n    const validators = Object.entries(plugin.module.validate);\n    for (const [property, validator] of validators) {\n      addPluginValidator(property, validator);\n    }\n  }\n  if (plugin.module.prepareConfig) {\n    registerPreparer(plugin.module.prepareConfig);\n  }\n  if (plugin.module.scrubConfig) {\n    registerScrubber(plugin.module.scrubConfig);\n  }\n  if (plugin.module.swarmOptions) {\n    registerSwarmOptions(plugin.module.swarmOptions);\n  }\n}\n\nexport function loadPlugins(plugins) {\n  plugins\n    .map(plugin => {\n      try {\n        // eslint-disable-next-line global-require\n        const module = require(plugin.path);\n        const name = module.name || plugin.name;\n\n        return { name, module };\n      } catch (e) {\n        console.log(chalk.red(`Unable to load plugin ${plugin.name}`));\n\n        // Hides error when plugin cannot be loaded\n        // Show the error when a plugin cannot resolve a module\n        if (\n          e.code !== 'MODULE_NOT_FOUND' ||\n          !moduleNotFoundIsPath(e, plugin.path)\n        ) {\n          console.log(e);\n        }\n\n        return { name: module.name || plugin.name, failed: true };\n      }\n    })\n    .filter(plugin => !plugin.failed)\n    .forEach(plugin => {\n      modules[plugin.name] = plugin.module;\n      registerPlugin(plugin);\n    });\n}\n\nfunction isDirectoryMupPlugin({ name, path: modulePath }) {\n  if (name === '__tests__') {\n    return false;\n  }\n\n  const moduleDir = join(__dirname, modulePath);\n\n  return fs.statSync(moduleDir).isDirectory();\n}\n"],"file":"load-plugins.js"}