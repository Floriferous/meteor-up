{"version":3,"sources":["../src/hooks.js"],"names":["hooks","registerHook","_hookName","_handler","hookName","handler","sections","split","method","push","runRemoteHooks","serversConfig","command","Promise","all","Object","values","map","server","then","output","console","log","host","catch","e","error"],"mappings":";;;;;;;;;AAAA;;AAKO,MAAMA,KAAK,GAAG,EAAd;;;AAEA,SAASC,YAAT,CAAsBC,SAAtB,EAAiCC,QAAjC,EAA2C;AAChD,MAAIC,QAAQ,GAAGF,SAAf;AACA,MAAIG,OAAO,GAAGF,QAAd;;AAEA,MAAI,4BAAgB,KAAhB,EAAuBC,QAAvB,MAAqC,CAAzC,EAA4C;AAC1C,UAAME,QAAQ,GAAGF,QAAQ,CAACG,KAAT,CAAe,GAAf,CAAjB;AACAH,IAAAA,QAAQ,GAAI,GAAEE,QAAQ,CAAC,CAAD,CAAI,YAAWA,QAAQ,CAAC,CAAD,CAAI,EAAjD;AACD;;AAED,MAAI,OAAOD,OAAP,KAAmB,UAAvB,EAAmC;AACjCA,IAAAA,OAAO,GAAG;AACRG,MAAAA,MAAM,EAAEL;AADA,KAAV;AAGD;;AAED,MAAIC,QAAQ,IAAIJ,KAAhB,EAAuB;AACrBA,IAAAA,KAAK,CAACI,QAAD,CAAL,CAAgBK,IAAhB,CAAqBJ,OAArB;AACD,GAFD,MAEO;AACLL,IAAAA,KAAK,CAACI,QAAD,CAAL,GAAkB,CAACC,OAAD,CAAlB;AACD;AACF;;AAEM,eAAeK,cAAf,CAA8BC,aAA9B,EAA6CC,OAA7C,EAAsD;AAC3D,SAAOC,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,MAAP,CAAcL,aAAd,EAChBM,GADgB,CACZC,MAAM,IAAI,0BAAcA,MAAd,EAAsBN,OAAtB,EACZO,IADY,CACP,CAAC;AACLC,IAAAA;AADK,GAAD,KAEA;AACJC,IAAAA,OAAO,CAACC,GAAR,CAAa,kBAAiBJ,MAAM,CAACK,IAAK,EAA1C;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACD,GANY,EAOZI,KAPY,CAONC,CAAC,IAAI;AACVJ,IAAAA,OAAO,CAACK,KAAR,CAAe,sCAAqCd,OAAQ,EAA5D;AACAS,IAAAA,OAAO,CAACK,KAAR,CAAcD,CAAd;AACD,GAVY,CADE,CAAZ,CAAP;AAYD","sourcesContent":["import {\n  countOccurences,\n  runSSHCommand\n} from './utils';\n\nexport const hooks = {};\n\nexport function registerHook(_hookName, _handler) {\n  let hookName = _hookName;\n  let handler = _handler;\n\n  if (countOccurences('\\\\.', hookName) === 1) {\n    const sections = hookName.split('.');\n    hookName = `${sections[0]}.default.${sections[1]}`;\n  }\n\n  if (typeof handler === 'function') {\n    handler = {\n      method: _handler\n    };\n  }\n\n  if (hookName in hooks) {\n    hooks[hookName].push(handler);\n  } else {\n    hooks[hookName] = [handler];\n  }\n}\n\nexport async function runRemoteHooks(serversConfig, command) {\n  return Promise.all(Object.values(serversConfig)\n    .map(server => runSSHCommand(server, command)\n      .then(({\n        output\n      }) => {\n        console.log(`=> output from ${server.host}`);\n        console.log(output);\n      })\n      .catch(e => {\n        console.error(`Error running remote hook command: ${command}`);\n        console.error(e);\n      })));\n}\n"],"file":"hooks.js"}