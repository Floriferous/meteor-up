{"version":3,"sources":["../src/swarm-utils.js"],"names":["log","currentManagers","serverInfo","hosts","Object","keys","forEach","key","server","swarm","LocalNodeState","Cluster","push","calculateAdditionalManagers","config","managers","servers","additionalManagers","length","desiredManagers","current","diff","_","difference","managersToAdd","splice","findNodes","nodes","manager","ids","reduce","result","serverName","id","NodeID","swarmNodes","map","node","ID","nodeIdsToServer","allIds","host","currentLabels","info","idToHost","Array","nodeHost","Spec","Labels","findClusters","usedNodeIds","clusters","clusterId","RemoteManagers","nodeIds","filter","unknownClusterNodes","showClusters","console","cluster","unknownNodes","indexOf"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport debug from 'debug';\nimport { getOptions } from './swarm-options';\n\nconst log = debug('mup:swarm-utils');\n\nexport function currentManagers(serverInfo) {\n  const hosts = [];\n\n  Object.keys(serverInfo).forEach(key => {\n    const server = serverInfo[key];\n\n    if (\n      server.swarm &&\n      server.swarm.LocalNodeState !== 'inactive' &&\n      server.swarm.Cluster\n    ) {\n      hosts.push(key);\n    }\n  });\n\n  log('current managers:', hosts);\n\n  return hosts;\n}\n\nexport function calculateAdditionalManagers(config) {\n  const { managers } = getOptions(config);\n  const servers = Object.keys(config.servers);\n  let additionalManagers = 0;\n\n  // Try to get an odd number of managers\n  if (managers.length % 2 === 0 && managers.length < servers.length) {\n    additionalManagers = 1;\n  }\n\n  // When there are enough servers, make sure there are\n  // at least 3 managers, since it can then handle one manager\n  // going down\n  if (servers.length >= 3 && managers.length < 3) {\n    additionalManagers = 3 - managers.length;\n  }\n\n  return additionalManagers;\n}\n\nexport function desiredManagers(config, serverInfo) {\n  const { managers } = getOptions(config);\n  let additionalManagers = calculateAdditionalManagers(config);\n\n  log('requested managers', managers);\n  log('additional managers', additionalManagers);\n\n  if (additionalManagers > 0) {\n    const current = currentManagers(serverInfo);\n    const diff = _.difference(current, managers);\n    const managersToAdd = diff.splice(0, additionalManagers);\n\n    log('managers to add', managersToAdd);\n    additionalManagers -= managersToAdd.length;\n    managers.push(...managersToAdd);\n  }\n\n  if (additionalManagers > 0) {\n    const diff = _.difference(Object.keys(config.servers), managers);\n    const managersToAdd = diff.splice(0, additionalManagers);\n\n    log('random servers to add', managersToAdd);\n    managers.push(...managersToAdd);\n  }\n\n  log('desired managers', managers);\n\n  return managers;\n}\n\nexport function findNodes(serverInfo) {\n  const nodes = [];\n  const managers = currentManagers(serverInfo);\n\n  if (managers.length === 0) {\n    return nodes;\n  }\n\n  // TODO: handle nodes that aren't listed in the config.server\n\n  const manager = managers[0];\n  const ids = Object.keys(serverInfo).reduce((result, serverName) => {\n    if (serverInfo[serverName].swarm) {\n      const id = serverInfo[serverName].swarm.NodeID;\n\n      result[id] = serverName;\n    }\n\n    return result;\n  }, {});\n\n  return serverInfo[manager].swarmNodes.map(node => ids[node.ID]);\n}\n\nexport function nodeIdsToServer(serverInfo) {\n  const allIds = [];\n  const result = {};\n\n  Object.keys(serverInfo).forEach(host => {\n    if (serverInfo[host].swarm) {\n      result[serverInfo[host].swarm.NodeID] = host;\n    }\n    if (serverInfo[host].swarmNodes) {\n      const nodes = serverInfo[host].swarmNodes;\n\n      allIds.push(...nodes.map(node => node.ID));\n    }\n  });\n\n  allIds.forEach(id => {\n    if (!(id in result)) {\n      // This node isn't listed in config.servers\n      result[id] = null;\n    }\n  });\n\n  return result;\n}\n\nexport function currentLabels(info) {\n  const result = {};\n  const idToHost = nodeIdsToServer(info);\n\n  Object.keys(info).forEach(host => {\n    if (info[host].swarmNodes instanceof Array) {\n      info[host].swarmNodes.forEach(node => {\n        const nodeHost = idToHost[node.ID];\n\n        // Check if it is a server mup has access to\n        if (nodeHost === null) {\n          return;\n        }\n\n        result[nodeHost] = node.Spec.Labels;\n      });\n    }\n  });\n\n  return result;\n}\n\nexport function findClusters(serverInfo) {\n  const usedNodeIds = [];\n  const clusters = currentManagers(serverInfo).reduce((result, manager) => {\n    const {\n      swarm,\n      swarmNodes\n    } = serverInfo[manager];\n    const clusterId = swarm.Cluster.ID;\n\n    if (!(clusterId in result)) {\n      const managers = swarm.RemoteManagers.map(({NodeID}) => NodeID);\n      const nodes = swarmNodes.map(({ID}) => ID);\n\n      result[clusterId] = {\n        id: clusterId,\n        managers,\n        nodes\n      };\n\n      usedNodeIds.push(...[...managers, ...nodes]);\n    }\n\n    return result;\n  }, {});\n\n  // Nodes not in a swarm cluster have an empty id\n  const nodeIds = Object.keys(nodeIdsToServer(serverInfo))\n    .filter(id => id.length > 0);\n  const unknownClusterNodes = _.difference(nodeIds, usedNodeIds);\n\n  if (unknownClusterNodes.length > 0) {\n    clusters['Unknown cluster(s)'] = {\n      id: 'Unknown cluster(s)',\n      managers: [],\n      nodes: unknownClusterNodes\n    };\n  }\n\n  return clusters;\n}\n\nexport function showClusters(clusters, nodeIds) {\n  console.log('');\n  console.log('=> List of Swarm Clusters:');\n\n  Object.keys(clusters).forEach(clusterId => {\n    const cluster = clusters[clusterId];\n    let unknownNodes = 0;\n\n    console.log(` - ID: ${clusterId}`);\n    console.log('  - Nodes:');\n    cluster.managers.forEach(manager => {\n      if (nodeIds[manager]) {\n        console.log(`     ${nodeIds[manager]} (manager)`);\n      } else {\n        unknownNodes += 1;\n      }\n    });\n    cluster.nodes.forEach(node => {\n      if (cluster.managers.indexOf(node) > -1) {\n        return;\n      }\n\n      if (nodeIds[node]) {\n        console.log(`     ${nodeIds[node]}`);\n      } else {\n        unknownNodes = +1;\n      }\n    });\n\n    if (unknownNodes > 0) {\n      console.log(`     Unknown nodes: ${unknownNodes}`);\n    }\n  });\n}\n"],"file":"swarm-utils.js"}