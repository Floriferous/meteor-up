{"version":3,"sources":["../../src/__tests__/swarm-utils.unit.js"],"names":["createServerInfo","servers","reduce","result","options","name","swarm","LocalNodeState","state","Cluster","cluster","describe","it","serverInfo","to","deep","equal","fourServersConfig","one","two","three","four","config","proxy","five"],"mappings":"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","sourcesContent":["import {\n  calculateAdditionalManagers, currentManagers, desiredManagers\n} from '../swarm-utils';\nimport { expect } from 'chai';\n\nfunction createServerInfo(servers) {\n  return servers.reduce((result, options) => {\n    result[options.name] = {\n      swarm: {\n        LocalNodeState: options.state || 'active',\n        Cluster: 'cluster' in options ? options.cluster : {}\n      }\n    };\n\n    return result;\n  }, {});\n}\n\ndescribe('swarm-utils', () => {\n  describe('currentManagers', () => {\n    it('should return active managers', () => {\n      const serverInfo = createServerInfo([{\n        name: 'one'\n      }, {\n        name: 'two',\n        state: 'inactive'\n      }, {\n        name: 'three',\n        cluster: null\n      }]);\n      const result = ['one'];\n\n      expect(currentManagers(serverInfo)).to.deep.equal(result);\n    });\n  });\n  describe('calculateAdditionalManagers', () => {\n    const fourServersConfig = {\n      servers: {\n        one: {},\n        two: {},\n        three: {},\n        four: {}\n      }\n    };\n\n    it('should be at least 1 when no requested managers', () => {\n      const config = {\n        servers: {\n          one: {},\n          two: {}\n        }\n      };\n\n      expect(calculateAdditionalManagers(config)).to.equal(1);\n    });\n    it('should be at least 3 when there is enough servers', () => {\n      expect(calculateAdditionalManagers(fourServersConfig)).to.equal(3);\n    });\n    it('should subtract requested managers', () => {\n      const config = {\n        ...fourServersConfig,\n        proxy: {\n          servers: {\n            one: {}\n          }\n        }\n      };\n\n      expect(calculateAdditionalManagers(config)).to.equal(2);\n    });\n    it('should be odd when enough servers', () => {\n      const config = {\n        servers: { one: {}, two: {}, three: {}, four: {}, five: {}},\n        proxy: {\n          servers: { one: {}, two: {}, three: {}, four: {}}\n        }\n      };\n\n      expect(calculateAdditionalManagers(config)).to.equal(1);\n    });\n    it('should be even when not enough servers', () => {\n      const config = {\n        ...fourServersConfig,\n        proxy: {\n          servers: { one: {}, two: {}, three: {}, four: {}}\n        }\n      };\n\n      expect(calculateAdditionalManagers(config)).to.equal(0);\n    });\n  });\n  describe('desiredManagers', () => {\n    it('should use requested servers', () => {\n      const config = {\n        servers: {one: {}, two: {}},\n        swarm: {},\n        proxy: {\n          servers: {\n            one: {}\n          }\n        }\n      };\n      const result = ['one'];\n\n      expect(desiredManagers(config)).to.deep.equal(result);\n    });\n    it('should have 3 managers if possible', () => {\n      const config = {\n        servers: {\n          one: {},\n          two: {},\n          three: {}\n        }\n      };\n      const serverInfo = createServerInfo([{\n        name: 'one',\n        cluster: null\n      }, {\n        name: 'two',\n        cluster: null\n      }, {\n        name: 'three',\n        cluster: null\n      }]);\n      const result = ['one', 'two', 'three'];\n\n      expect(desiredManagers(config, serverInfo)).to.deep.equal(result);\n    });\n    it('should use existing managers', () => {\n      const config = {\n        servers: {\n          one: {},\n          two: {}\n        }\n      };\n      const serverInfo = createServerInfo([{\n        name: 'one',\n        cluster: null\n      }, {\n        name: 'two'\n      }]);\n\n      const result = ['two'];\n\n      expect(desiredManagers(config, serverInfo)).to.deep.equal(result);\n    });\n  });\n});\n"],"file":"swarm-utils.unit.js"}