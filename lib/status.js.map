{"version":3,"sources":["../src/status.js"],"names":["withColor","color","text","chalk","console","log","pickWorseColor","colors","includes","parseDockerInfo","dockerInfo","containerStatus","State","Status","statusColor","Restarting","Running","upTime","Date","FinishedAt","getTime","Created","restartCount","RestartCount","Line","constructor","parent","children","updateColor","updateChildColor","newColor","addLine","line","push","display","overview","depth","show","spaces","repeat","forEach","child","StatusDisplay","title","overallColor","tree","rootLine"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\n\nfunction withColor(color = 'reset', text) {\n  if (!(color in chalk)) {\n    console.log('unknown color', color, 'for text', text);\n  }\n\n  return chalk[color](text);\n}\n\nexport function pickWorseColor(...colors) {\n  if (colors.includes('red')) {\n    return 'red';\n  }\n  if (colors.includes('yellow')) {\n    return 'yellow';\n  }\n  if (colors.includes('green')) {\n    return 'green';\n  }\n\n  return colors[0];\n}\n\nexport function parseDockerInfo(dockerInfo) {\n  const containerStatus = dockerInfo.State.Status;\n  let statusColor = 'green';\n\n  if (dockerInfo.State.Restarting) {\n    statusColor = 'yellow';\n  } else if (dockerInfo.State.Running !== true) {\n    statusColor = 'red';\n  }\n\n  return {\n    containerStatus,\n    statusColor,\n    upTime: new Date(dockerInfo.State.FinishedAt).getTime() -\n      new Date(dockerInfo.Created).getTime(),\n    restartCount: dockerInfo.RestartCount\n  };\n}\n\nclass Line {\n  constructor(text, color, parent) {\n    this.children = [];\n    this.color = color;\n    this.text = text;\n    this.parent = parent;\n\n    this.updateColor(color);\n  }\n\n  updateColor(color) {\n    this.color = color;\n\n    if (this.parent) {\n      this.parent.updateChildColor(color);\n    }\n  }\n\n  updateChildColor(color) {\n    const newColor = pickWorseColor(this.color, color);\n    this.updateColor(newColor);\n  }\n\n  addLine(text, color) {\n    const line = new Line(text, color, this);\n    this.children.push(line);\n\n    return line;\n  }\n\n  display(overview, depth) {\n    let show = true;\n    if (overview) {\n      show = depth === 0 || this.color && this.color !== 'green';\n    }\n\n    if (show) {\n      const spaces = '  '.repeat(depth);\n      console.log(withColor(this.color, `${spaces}${this.text}`));\n    }\n\n    this.children.forEach(child => {\n      child.display(overview, depth + 1);\n    });\n  }\n}\n\nexport class StatusDisplay {\n  constructor(title) {\n    this.overallColor = 'green';\n    this.tree = [];\n    this.title = title;\n    this.rootLine = new Line(`=> ${title}`, this.overallColor);\n  }\n\n  addLine(text, color) {\n    return this.rootLine.addLine(text, color);\n  }\n\n  show(overview) {\n    // show empty line to separate from any other status information\n    console.log('');\n    this.rootLine.display(overview, 0);\n  }\n}\n"],"file":"status.js"}