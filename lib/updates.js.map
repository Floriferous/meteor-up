{"version":3,"sources":["../src/updates.js"],"names":["log","SKIP_CHECK_UPDATE","process","env","MUP_SKIP_UPDATE_CHECK","parseVersion","version","split","n","filter","segment","length","map","Number","newerStable","local","remote","i","sameIndex","compareVersions","next","beta","isStable","available","slice","showUpdateOnExit","pkg","command","name","text","chalk","green","on","console","padding","margin","align","borderColor","checkPackageUpdates","axios","get","then","data","npmVersion","latest","nextVersion","catch","e","packages","forEach","path","packagePath","packageJsonPath","resolve","dirname","require"],"mappings":"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","sourcesContent":["import {\n  flatMap,\n  isEqual\n} from 'lodash';\nimport axios from 'axios';\nimport boxen from 'boxen';\nimport chalk from 'chalk';\nimport debug from 'debug';\nimport path from 'path';\n\nconst log = debug('mup:updates');\nconst SKIP_CHECK_UPDATE = process.env.MUP_SKIP_UPDATE_CHECK === 'true';\n\nfunction parseVersion(version) {\n  return flatMap(version.split('.'), n =>\n    n.split('-beta').filter(segment => segment.length > 0).map(Number)\n  );\n}\n\nfunction newerStable(local, remote) {\n  for (let i = 0; i < 3; i++) {\n    for (let sameIndex = 0; sameIndex < i; sameIndex += 1) {\n      if (local[sameIndex] !== remote[sameIndex]) {\n        return false;\n      }\n    }\n\n    if (local[i] < remote[i]) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction compareVersions(local, remote, next) {\n  const beta = local.length > 3;\n  let isStable = true;\n  let available = newerStable(local, remote);\n\n  if (beta && !available) {\n    // check if stable version for beta is available\n    available = isEqual(remote, local.slice(0, 3));\n  }\n\n  if (beta && !available) {\n    // check if newer beta is available\n    available = next[3] > local[3];\n    isStable = false;\n  }\n\n  return {\n    available,\n    isStable\n  };\n}\n\nfunction showUpdateOnExit(pkg, version, isStable) {\n  const command = isStable ? `npm i -g ${pkg.name}` : `npm i -g ${pkg.name}@next`;\n  let text = `Update available for ${pkg.name}`;\n  text += `\\n${pkg.version} => ${version}`;\n\n  text += `\\nTo update, run ${chalk.green(command)}`;\n\n  process.on('exit', () => {\n    console.log(\n      boxen(text, {\n        padding: 1,\n        margin: 1,\n        align: 'center',\n        borderColor: 'yellow'\n      })\n    );\n  });\n}\n\nfunction checkPackageUpdates(name, pkg) {\n  log(`retrieving tags for ${name}`);\n\n  return axios.get(`https://registry.npmjs.org/-/package/${name}/dist-tags`)\n    .then(({ data }) => {\n      const npmVersion = data.latest || '0.0.0';\n      const nextVersion = data.next || '0.0.0';\n\n      const local = parseVersion(pkg.version);\n      const remote = parseVersion(npmVersion);\n      const next = parseVersion(nextVersion);\n\n      const {\n        available,\n        isStable\n      } = compareVersions(local, remote, next);\n\n      log(`finished update check for ${name}`);\n      if (available) {\n        showUpdateOnExit(pkg, isStable ? npmVersion : nextVersion, isStable);\n      }\n    }).catch(e => {\n      // It is okay if this fails\n      log(e);\n    });\n}\n\nexport default function(packages) {\n  log('checking for updates');\n  log('Packages: ', packages);\n\n  if (SKIP_CHECK_UPDATE) {\n    log('skipping update check');\n\n    return;\n  }\n\n  packages.forEach(({ name, path: packagePath }) => {\n    try {\n      const packageJsonPath = path.resolve(path.dirname(packagePath), 'package.json');\n      // eslint-disable-next-line global-require\n      const pkg = require(packageJsonPath);\n      checkPackageUpdates(name, pkg);\n    } catch (e) {\n      // It is okay if this fails\n      log(e);\n    }\n  });\n}\n"],"file":"updates.js"}