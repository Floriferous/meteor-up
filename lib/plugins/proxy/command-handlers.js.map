{"version":3,"sources":["../../../src/plugins/proxy/command-handlers.js"],"names":["log","PROXY_CONTAINER_NAME","logs","api","config","getConfig","proxy","console","error","process","exit","args","getArgs","slice","sessions","getDockerLogs","leLogs","getSessions","setup","serverConfig","servers","appConfig","app","appName","name","list","nodemiral","taskList","domains","split","executeScript","script","resolvePath","__dirname","vars","copy","src","dest","letsEncryptEmail","ssl","swarmEnabled","nginxServerConfig","fs","readFileSync","getBasePath","toString","nginxLocationConfig","hasServerConfig","hasLocationConfig","locationConfig","proxyName","clientUploadLimit","upload","crt","key","hostnames","Object","keys","setUpstream","loadBalancing","stickySessions","port","env","PORT","runTaskList","series","verbose","getVerbose","then","runCommand","reconfigShared","shared","length","httpPort","httpsPort","envLetsEncrypt","sharedNginxConfig","nginxConfig","templatePath","start","stop","command","Promise","all","map","session","runSSHCommand","results","forEach","host","output","status","lines","overallColor","swarm","type","chalk","yellow","collectorConfig","nginxDocker","parser","letsEncryptDocker","certificateExpire","stdout","code","reduce","result","item","index","items","trim","serverInfo","getServerInfo","values","_host","push","State","Status","NetworkSettings","Ports","HostPort","join","updateProxyForLoadBalancing","imagePort","docker"],"mappings":"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","sourcesContent":["import { addProxyEnv, getLoadBalancingHosts, getSessions } from './utils';\nimport chalk from 'chalk';\nimport { clone } from 'lodash';\nimport debug from 'debug';\nimport fs from 'fs';\nimport nodemiral from '@zodern/nodemiral';\n\nconst log = debug('mup:module:proxy');\nconst PROXY_CONTAINER_NAME = 'mup-nginx-proxy';\n\nexport function logs(api) {\n  log('exec => mup proxy logs');\n  const config = api.getConfig().proxy;\n\n  if (!config) {\n    console.error('error: no configs found for proxy');\n    process.exit(1);\n  }\n\n  const args = api.getArgs().slice(1);\n  const sessions = getSessions(api);\n\n  return api.getDockerLogs(PROXY_CONTAINER_NAME, sessions, args);\n}\n\nexport function leLogs(api) {\n  log('exec => mup proxy le-logs');\n  const config = api.getConfig().proxy;\n\n  if (!config) {\n    console.error('error: no configs found for proxy');\n    process.exit(1);\n  }\n\n  const args = api.getArgs().slice(1);\n\n  args[0] = 'logs';\n  const sessions = api.getSessions(['app']);\n\n  return api.getDockerLogs(\n    `${PROXY_CONTAINER_NAME}-letsencrypt`,\n    sessions,\n    args\n  );\n}\n\nexport function setup(api) {\n  log('exec => mup proxy setup');\n  const config = api.getConfig().proxy;\n  const serverConfig = api.getConfig().servers;\n  const appConfig = api.getConfig().app;\n  const appName = appConfig.name;\n\n  if (!config) {\n    console.error('error: no configs found for proxy');\n    process.exit(1);\n  }\n\n  const sessions = getSessions(api);\n  const list = nodemiral.taskList('Setup proxy');\n  const domains = config.domains.split(',');\n\n  list.executeScript('Setup Environment', {\n    script: api.resolvePath(__dirname, 'assets/proxy-setup.sh'),\n    vars: {\n      name: PROXY_CONTAINER_NAME,\n      appName\n    }\n  });\n\n  list.copy('Pushing the Startup Script', {\n    src: api.resolvePath(__dirname, 'assets/templates/start.sh'),\n    dest: `/opt/${PROXY_CONTAINER_NAME}/config/start.sh`,\n    vars: {\n      appName: PROXY_CONTAINER_NAME,\n      letsEncryptEmail: config.ssl ? config.ssl.letsEncryptEmail : null,\n      swarmEnabled: api.swarmEnabled()\n    }\n  });\n\n  list.copy('Pushing Nginx Config Template', {\n    src: api.resolvePath(__dirname, 'assets/nginx.tmpl'),\n    dest: `/opt/${PROXY_CONTAINER_NAME}/config/nginx.tmpl`\n  });\n\n  let nginxServerConfig = '';\n\n  if (config.nginxServerConfig) {\n    nginxServerConfig = fs.readFileSync(\n      api.resolvePath(api.getBasePath(), config.nginxServerConfig)\n    ).toString('utf8');\n  }\n\n  let nginxLocationConfig = '';\n\n  if (config.nginxLocationConfig) {\n    nginxLocationConfig = fs.readFileSync(\n      api.resolvePath(api.getBasePath(), config.nginxLocationConfig)\n    ).toString('utf8');\n  }\n\n  list.executeScript('Pushing Nginx Config', {\n    script: api.resolvePath(__dirname, 'assets/nginx-config.sh'),\n    vars: {\n      hasServerConfig: config.nginxServerConfig,\n      hasLocationConfig: config.nginxLocationConfig,\n      serverConfig: nginxServerConfig,\n      locationConfig: nginxLocationConfig,\n      domains,\n      proxyName: PROXY_CONTAINER_NAME,\n      clientUploadLimit: config.clientUploadLimit || '10M'\n    }\n  });\n\n  list.executeScript('Cleaning Up SSL Certificates', {\n    script: api.resolvePath(__dirname, 'assets/ssl-cleanup.sh'),\n    vars: {\n      name: appName,\n      proxyName: PROXY_CONTAINER_NAME\n    }\n  });\n\n  if (\n    config.ssl &&\n    !config.ssl.letsEncryptEmail &&\n    config.ssl.upload !== false &&\n    config.ssl.crt\n  ) {\n    list.copy('Copying SSL Certificate Bundle', {\n      src: api.resolvePath(api.getBasePath(), config.ssl.crt),\n      dest: `/opt/${appName}/config/bundle.crt`\n    });\n    list.copy('Copying SSL Private Key', {\n      src: api.resolvePath(api.getBasePath(), config.ssl.key),\n      dest: `/opt/${appName}/config/private.key`\n    });\n    list.executeScript('Setup SSL Certificates for Domains', {\n      script: api.resolvePath(__dirname, 'assets/ssl-setup.sh'),\n      vars: {\n        appName,\n        proxyName: PROXY_CONTAINER_NAME,\n        domains\n      }\n    });\n  }\n\n  const hostnames = getLoadBalancingHosts(\n    serverConfig,\n    Object.keys(appConfig.servers)\n  );\n\n  list.executeScript('Configure Nginx Upstream', {\n    script: api.resolvePath(__dirname, 'assets/upstream.sh'),\n    vars: {\n      domains,\n      name: appName,\n      setUpstream: !api.swarmEnabled() && config.loadBalancing,\n      stickySessions: config.stickySessions !== false,\n      proxyName: PROXY_CONTAINER_NAME,\n      port: appConfig.env.PORT,\n      hostnames\n    }\n  });\n\n  return api.runTaskList(list, sessions, {\n    series: false,\n    verbose: api.getVerbose()\n  }).then(() => api.runCommand('proxy.start'));\n}\n\nexport function reconfigShared(api) {\n  const config = api.getConfig().proxy;\n  const shared = config.shared || {};\n\n  if (!config) {\n    console.error('error: no configs found for proxy');\n    process.exit(1);\n  }\n\n  console.log('The shared settings affect all apps using this reverse proxy.');\n\n  if (Object.keys(shared).length === 0) {\n    console.log('No shared config properties are set. Resetting proxy to defaults.');\n  }\n\n  const list = nodemiral.taskList('Configuring Proxy\\'s Shared Settings');\n\n  list.copy('Sending shared variables', {\n    src: api.resolvePath(__dirname, 'assets/templates/shared-config.sh'),\n    dest: `/opt/${PROXY_CONTAINER_NAME}/config/shared-config.sh`,\n    vars: {\n      httpPort: shared.httpPort,\n      httpsPort: shared.httpsPort,\n      clientUploadLimit: shared.clientUploadLimit\n    }\n  });\n\n  const env = clone(shared.env);\n\n  list.copy('Sending proxy environment variables', {\n    src: api.resolvePath(__dirname, 'assets/templates/env.list'),\n    dest: `/opt/${PROXY_CONTAINER_NAME}/config/env.list`,\n    vars: {\n      env: env || {}\n    }\n  });\n\n  const envLetsEncrypt = clone(shared.envLetsEncrypt);\n\n  list.copy('Sending let\\'s encrypt environment variables', {\n    src: api.resolvePath(__dirname, 'assets/templates/env.list'),\n    dest: `/opt/${PROXY_CONTAINER_NAME}/config/env_letsencrypt.list`,\n    vars: {\n      env: envLetsEncrypt || {}\n    }\n  });\n\n  const sharedNginxConfig = shared.nginxConfig || api.resolvePath(__dirname, 'assets/proxy.conf');\n  list.copy('Sending nginx config', {\n    src: sharedNginxConfig,\n    dest: `/opt/${PROXY_CONTAINER_NAME}/config/nginx-default.conf`\n  });\n\n  if (shared.templatePath) {\n    const templatePath = shared.templatePath;\n    list.copy('Pushing Nginx Config Template', {\n      src: templatePath,\n      dest: `/opt/${PROXY_CONTAINER_NAME}/config/nginx-shared.tmpl`\n    });\n  } else {\n    list.executeScript('Cleanup Template', {\n      script: api.resolvePath(__dirname, 'assets/cleanup-template.sh'),\n      vars: {\n        appName: PROXY_CONTAINER_NAME\n      }\n    });\n  }\n\n\n  const sessions = getSessions(api);\n\n  return api.runTaskList(list, sessions, {\n    series: true,\n    verbose: api.verbose\n  }).then(() => api.runCommand('proxy.start'));\n}\n\nexport function start(api) {\n  log('exec => mup proxy start');\n  const config = api.getConfig().proxy;\n\n  if (!config) {\n    console.error('error: no configs found for proxy');\n    process.exit(1);\n  }\n\n  const sessions = getSessions(api);\n  const list = nodemiral.taskList('Start proxy');\n\n  list.executeScript('Start proxy', {\n    script: api.resolvePath(__dirname, 'assets/proxy-start.sh'),\n    vars: {\n      appName: PROXY_CONTAINER_NAME\n    }\n  });\n\n\n  return api.runTaskList(list, sessions, {\n    series: true,\n    verbose: api.getVerbose()\n  });\n}\n\nexport function stop(api) {\n  log('exec => mup proxy stop');\n\n  const list = nodemiral.taskList('Stop proxy');\n\n  list.executeScript('Stop proxy', {\n    script: api.resolvePath(__dirname, 'assets/proxy-stop.sh'),\n    vars: {\n      appName: PROXY_CONTAINER_NAME\n    }\n  });\n\n  const sessions = getSessions(api);\n\n  return api.runTaskList(list, sessions, { verbose: api.getVerbose() });\n}\n\nexport async function nginxConfig(api) {\n  log('exec => mup proxy nginx-config');\n\n  const command = `docker exec ${PROXY_CONTAINER_NAME} cat /etc/nginx/conf.d/default.conf`;\n  const sessions = getSessions(api);\n\n\n  await Promise.all(\n    sessions.map(session =>\n      api.runSSHCommand(session, command)\n    )\n  ).then(results => {\n    results.forEach(({ host, output }) => {\n      console.log(`===== ${host} ======`);\n      console.log(output);\n    });\n  });\n}\n\nexport async function status(api) {\n  const config = api.getConfig();\n  const lines = [];\n  let overallColor = 'green';\n\n  if (!config.proxy) {\n    if (config.swarm && config.app && config.app.type === 'meteor') {\n      console.log(chalk.yellow('Proxy should be enabled when using swarm for load balancing to work.'));\n    }\n\n    return;\n  }\n\n  const servers = Object.keys(config.proxy.servers || config.app.servers);\n  const collectorConfig = {\n    nginxDocker: {\n      command: `docker inspect ${PROXY_CONTAINER_NAME} --format \"{{json .}}\"`,\n      parser: 'json'\n    },\n    letsEncryptDocker: {\n      command: `docker inspect ${PROXY_CONTAINER_NAME}-letsencrypt --format \"{{json .}}\"`,\n      parser: 'json'\n    },\n    certificateExpire: {\n      command: `cd /opt/${PROXY_CONTAINER_NAME}/mounted-certs && find . -name '*.chain.pem' -exec echo '{}' \\\\; -exec openssl x509 -enddate -noout -in '{}' \\\\;`,\n      parser(stdout, code) {\n        if (code === 0) {\n          return stdout.split('\\n').reduce((result, item, index, items) => {\n            if (!(index % 2) && item.trim() !== '') {\n              result[item.slice(2)] = items[index + 1].split('=')[1];\n            }\n\n            return result;\n          }, {});\n        }\n\n        return null;\n      }\n    }\n  };\n\n  const serverInfo = await api.getServerInfo(servers, collectorConfig);\n\n  Object.values(serverInfo).forEach(\n    ({ _host, nginxDocker, letsEncryptDocker, certificateExpire }) => {\n      lines.push(` - ${_host}:`);\n      lines.push('   - NGINX:');\n      lines.push(`     - Status: ${nginxDocker ? nginxDocker.State.Status : 'Stopped'}`);\n\n      if (nginxDocker && nginxDocker.State.Status !== 'running') {\n        overallColor = 'red';\n      }\n\n      if (nginxDocker) {\n        lines.push('     - Ports:');\n        Object.keys(nginxDocker.NetworkSettings.Ports || {}).forEach(key => {\n          if (key === '443/tcp') {\n            lines.push(`       - HTTPS: ${nginxDocker.NetworkSettings.Ports[key][0].HostPort}`);\n          } else if (key === '80/tcp') {\n            lines.push(`       - HTTP: ${nginxDocker.NetworkSettings.Ports[key][0].HostPort}`);\n          }\n        });\n      }\n\n      lines.push('   - Let\\'s Encrypt');\n      lines.push(`     - Status: ${letsEncryptDocker ? letsEncryptDocker.State.Status : 'Stopped'}`);\n\n      if (letsEncryptDocker && letsEncryptDocker.State.Status !== 'running') {\n        overallColor = 'red';\n      }\n\n      if (certificateExpire && certificateExpire.length > 0) {\n        lines.push('     - Certificates');\n        Object.keys(certificateExpire).forEach(key => {\n          lines.push(`       - ${key}: ${certificateExpire[key]}`);\n        });\n      }\n    });\n\n  console.log(chalk[overallColor]('\\n=> Reverse Proxy Status'));\n  console.log(lines.join('\\n'));\n}\n\nexport function updateProxyForLoadBalancing(api) {\n  const config = api.getConfig();\n  const sessions = getSessions(api);\n  const list = nodemiral.taskList('Configure Proxy for Service');\n\n  list.executeScript('Configure Proxy', {\n    script: api.resolvePath(__dirname, 'assets/service-configure.sh'),\n    vars: {\n      appName: config.app.name,\n      imagePort: config.app.docker.imagePort,\n      env: addProxyEnv(config, {}),\n      domains: config.proxy.domains.split(','),\n      proxyName: PROXY_CONTAINER_NAME,\n      swarmEnabled: api.swarmEnabled()\n    }\n  });\n\n  return api.runTaskList(list, sessions, {\n    series: true,\n    verbose: api.getVerbose()\n  });\n}\n"],"file":"command-handlers.js"}