{"version":3,"sources":["../../../src/plugins/proxy/utils.js"],"names":["getSessions","api","proxyConfig","getConfig","proxy","servers","addProxyEnv","config","env","sslConfig","ssl","VIRTUAL_HOST","domains","HTTPS_METHOD","forceSSL","letsEncryptEmail","LETSENCRYPT_HOST","app","LETSENCRYPT_EMAIL","loadBalancing","randomPort","random","create","name","intBetween","PORT","normalizeUrl","_config","isHttpUrl","RegExp","test","ROOT_URL","urlArray","split","join","getLoadBalancingHosts","serverConfig","serverNames","map","privateIp","host"],"mappings":";;;;;;;;;;AAAA;;;;AAEO,SAASA,WAAT,CAAqBC,GAArB,EAA0B;AAC/B,QAAMC,WAAW,GAAGD,GAAG,CAACE,SAAJ,GAAgBC,KAApC;;AAEA,MAAIF,WAAW,CAACG,OAAhB,EAAyB;AACvB,WAAOJ,GAAG,CAACD,WAAJ,CAAgB,CAAC,OAAD,CAAhB,CAAP;AACD;;AAED,SAAOC,GAAG,CAACD,WAAJ,CAAgB,CAAC,KAAD,CAAhB,CAAP;AACD;;AAEM,SAASM,WAAT,CAAqBC,MAArB,EAA6BC,GAA7B,EAAkC;AACvC,QAAMC,SAAS,GAAGF,MAAM,CAACH,KAAP,CAAaM,GAA/B;AAEAF,EAAAA,GAAG,CAACG,YAAJ,GAAmBJ,MAAM,CAACH,KAAP,CAAaQ,OAAhC;AACAJ,EAAAA,GAAG,CAACK,YAAJ,GAAmBJ,SAAS,IAAIA,SAAS,CAACK,QAAvB,GAAkC,UAAlC,GAA+C,YAAlE;;AAEA,MAAIL,SAAS,IAAIA,SAAS,CAACM,gBAA3B,EAA6C;AAC3CP,IAAAA,GAAG,CAACQ,gBAAJ,GAAuBT,MAAM,CAACH,KAAP,CAAaQ,OAApC;AACAL,IAAAA,MAAM,CAACU,GAAP,CAAWT,GAAX,CAAeU,iBAAf,GAAmCT,SAAS,CAACM,gBAA7C;AACD;;AAED,MAAIR,MAAM,CAACH,KAAP,CAAae,aAAjB,EAAgC;AAC9B,UAAMC,UAAU,GAAGC,oBAAOC,MAAP,CAAcf,MAAM,CAACU,GAAP,CAAWM,IAAzB,EAA+BC,UAA/B,CAA0C,KAA1C,EAAiD,KAAjD,CAAnB;;AACAhB,IAAAA,GAAG,CAACiB,IAAJ,GAAWjB,GAAG,CAACiB,IAAJ,IAAYL,UAAvB;AACD;;AAED,SAAOZ,GAAP;AACD;;AAEM,SAASkB,YAAT,CAAsBnB,MAAtB,EAA8BC,GAA9B,EAAmC;AACxC,QAAMmB,OAAO,GAAGpB,MAAhB;AACA,QAAME,SAAS,GAAGF,MAAM,CAACH,KAAP,CAAaM,GAA/B;AACA,QAAMkB,SAAS,GAAG,IAAIC,MAAJ,CAAW,YAAX,EAAyB,GAAzB,EAA8BC,IAA9B,CAAmCtB,GAAG,CAACuB,QAAvC,CAAlB;;AAEA,MAAItB,SAAS,IAAImB,SAAjB,EAA4B;AAC1B,UAAMI,QAAQ,GAAGL,OAAO,CAACV,GAAR,CAAYT,GAAZ,CAAgBuB,QAAhB,CAAyBE,KAAzB,CAA+B,GAA/B,CAAjB;;AAEAD,IAAAA,QAAQ,CAAC,CAAD,CAAR,GAAe,GAAEA,QAAQ,CAAC,CAAD,CAAI,IAA7B;AACAL,IAAAA,OAAO,CAACV,GAAR,CAAYT,GAAZ,CAAgBuB,QAAhB,GAA2BC,QAAQ,CAACE,IAAT,CAAc,EAAd,CAA3B;AACD;;AAED,SAAOP,OAAO,CAACV,GAAR,CAAYT,GAAZ,CAAgBuB,QAAvB;AACD;;AAEM,SAASI,qBAAT,CAA+BC,YAA/B,EAA6CC,WAA7C,EAA0D;AAC/D,SAAOA,WAAW,CAACC,GAAZ,CAAgBf,IAAI,IACzBa,YAAY,CAACb,IAAD,CAAZ,CAAmBgB,SAAnB,IAAgCH,YAAY,CAACb,IAAD,CAAZ,CAAmBiB,IAD9C,CAAP;AAGD","sourcesContent":["import random from 'random-seed';\n\nexport function getSessions(api) {\n  const proxyConfig = api.getConfig().proxy;\n\n  if (proxyConfig.servers) {\n    return api.getSessions(['proxy']);\n  }\n\n  return api.getSessions(['app']);\n}\n\nexport function addProxyEnv(config, env) {\n  const sslConfig = config.proxy.ssl;\n\n  env.VIRTUAL_HOST = config.proxy.domains;\n  env.HTTPS_METHOD = sslConfig && sslConfig.forceSSL ? 'redirect' : 'noredirect';\n\n  if (sslConfig && sslConfig.letsEncryptEmail) {\n    env.LETSENCRYPT_HOST = config.proxy.domains;\n    config.app.env.LETSENCRYPT_EMAIL = sslConfig.letsEncryptEmail;\n  }\n\n  if (config.proxy.loadBalancing) {\n    const randomPort = random.create(config.app.name).intBetween(10000, 20000);\n    env.PORT = env.PORT || randomPort;\n  }\n\n  return env;\n}\n\nexport function normalizeUrl(config, env) {\n  const _config = config;\n  const sslConfig = config.proxy.ssl;\n  const isHttpUrl = new RegExp('^(http)://', 'i').test(env.ROOT_URL);\n\n  if (sslConfig && isHttpUrl) {\n    const urlArray = _config.app.env.ROOT_URL.split(':');\n\n    urlArray[0] = `${urlArray[0]}s:`;\n    _config.app.env.ROOT_URL = urlArray.join('');\n  }\n\n  return _config.app.env.ROOT_URL;\n}\n\nexport function getLoadBalancingHosts(serverConfig, serverNames) {\n  return serverNames.map(name =>\n    serverConfig[name].privateIp || serverConfig[name].host\n  );\n}\n"],"file":"utils.js"}