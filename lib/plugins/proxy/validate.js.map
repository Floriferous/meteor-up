{"version":3,"sources":["../../../src/plugins/proxy/validate.js"],"names":["schema","joi","object","keys","ssl","letsEncryptEmail","string","trim","crt","key","forceSSL","bool","and","without","or","domains","required","nginxServerConfig","nginxLocationConfig","clientUploadLimit","servers","loadBalancing","stickySessions","shared","alternatives","try","number","httpPort","httpsPort","nginxConfig","nginxTemplate","templatePath","env","pattern","boolean","envLetsEncrypt","ACME_CA_URI","regex","RegExp","DEBUG","NGINX_PROXY_CONTAINER","config","addDepreciation","combineErrorDetails","VALIDATE_OPTIONS","addLocation","details","validate","proxy","app","PORT","push","message","path","swarm","enabled"],"mappings":";;;;;;;AAAA;;;;AAEA,MAAMA,MAAM,GAAGC,aAAIC,MAAJ,GAAaC,IAAb,CAAkB;AAC/BC,EAAAA,GAAG,EAAEH,aACFC,MADE,GAEFC,IAFE,CAEG;AACJE,IAAAA,gBAAgB,EAAEJ,aAAIK,MAAJ,GAAaC,IAAb,EADd;AAEJC,IAAAA,GAAG,EAAEP,aAAIK,MAAJ,GAAaC,IAAb,EAFD;AAGJE,IAAAA,GAAG,EAAER,aAAIK,MAAJ,GAAaC,IAAb,EAHD;AAIJG,IAAAA,QAAQ,EAAET,aAAIU,IAAJ;AAJN,GAFH,EAQFC,GARE,CAQE,KARF,EAQS,KART,EASFC,OATE,CASM,kBATN,EAS0B,CAAC,KAAD,EAAQ,KAAR,CAT1B,EAUFC,EAVE,CAUC,kBAVD,EAUqB,KAVrB,EAU4B,UAV5B,CAD0B;AAY/BC,EAAAA,OAAO,EAAEd,aAAIK,MAAJ,GAAaU,QAAb,EAZsB;AAa/BC,EAAAA,iBAAiB,EAAEhB,aAAIK,MAAJ,EAbY;AAc/BY,EAAAA,mBAAmB,EAAEjB,aAAIK,MAAJ,EAdU;AAe/Ba,EAAAA,iBAAiB,EAAElB,aAAIK,MAAJ,EAfY;AAgB/Bc,EAAAA,OAAO,EAAEnB,aAAIC,MAAJ,EAhBsB;AAiB/BmB,EAAAA,aAAa,EAAEpB,aAAIU,IAAJ,EAjBgB;AAkB/BW,EAAAA,cAAc,EAAErB,aAAIU,IAAJ,EAlBe;AAmB/BY,EAAAA,MAAM,EAAEtB,aAAIC,MAAJ,GAAaC,IAAb,CAAkB;AACxBgB,IAAAA,iBAAiB,EAAElB,aAAIuB,YAAJ,GAAmBC,GAAnB,CAAuBxB,aAAIyB,MAAJ,EAAvB,EAAqCzB,aAAIK,MAAJ,EAArC,CADK;AAExBqB,IAAAA,QAAQ,EAAE1B,aAAIyB,MAAJ,EAFc;AAGxBE,IAAAA,SAAS,EAAE3B,aAAIyB,MAAJ,EAHa;AAIxBG,IAAAA,WAAW,EAAE5B,aAAIK,MAAJ,EAJW;AAKxBwB,IAAAA,aAAa,EAAE7B,aAAIK,MAAJ,EALS;AAMxByB,IAAAA,YAAY,EAAE9B,aAAIK,MAAJ,EANU;AAOxB0B,IAAAA,GAAG,EAAE/B,aACFC,MADE,GAEF+B,OAFE,CAEM,SAFN,EAEiB,CAAChC,aAAIK,MAAJ,EAAD,EAAeL,aAAIyB,MAAJ,EAAf,EAA6BzB,aAAIiC,OAAJ,EAA7B,CAFjB,CAPmB;AAUxBC,IAAAA,cAAc,EAAElC,aACbC,MADa,GAEbC,IAFa,CAER;AACJiC,MAAAA,WAAW,EAAEnC,aAAIK,MAAJ,GAAa+B,KAAb,CAAmB,IAAIC,MAAJ,CAAW,kBAAX,EAA+B,GAA/B,CAAnB,CADT;AAEJC,MAAAA,KAAK,EAAEtC,aAAIiC,OAAJ,EAFH;AAGJM,MAAAA,qBAAqB,EAAEvC,aAAIK,MAAJ;AAHnB,KAFQ,EAOb2B,OAPa,CAOL,SAPK,EAOM,CAAChC,aAAIK,MAAJ,EAAD,EAAeL,aAAIyB,MAAJ,EAAf,EAA6BzB,aAAIiC,OAAJ,EAA7B,CAPN;AAVQ,GAAlB;AAnBuB,CAAlB,CAAf;;AAwCe,kBAASO,MAAT,EAAiB;AAC9BC,EAAAA,eAD8B;AAE9BC,EAAAA,mBAF8B;AAG9BC,EAAAA,gBAH8B;AAI9BC,EAAAA;AAJ8B,CAAjB,EAKZ;AACD,MAAIC,OAAO,GAAG,EAAd;AAEAA,EAAAA,OAAO,GAAGH,mBAAmB,CAC3BG,OAD2B,EAE3B7C,aAAI8C,QAAJ,CAAaN,MAAM,CAACO,KAApB,EAA2BhD,MAA3B,EAAmC4C,gBAAnC,CAF2B,CAA7B;;AAIA,MACEH,MAAM,CAACQ,GAAP,IACAR,MAAM,CAACQ,GAAP,CAAWjB,GADX,IAEAS,MAAM,CAACQ,GAAP,CAAWjB,GAAX,CAAekB,IAFf,IAGAT,MAAM,CAACQ,GAAP,CAAWjB,GAAX,CAAekB,IAAf,KAAwB,EAHxB,IAIA,CAACT,MAAM,CAACO,KAAP,CAAa3B,aALhB,EAME;AACAyB,IAAAA,OAAO,CAACK,IAAR,CAAa;AACXC,MAAAA,OAAO,EAAE,sDADE;AAEXC,MAAAA,IAAI,EAAE;AAFK,KAAb;AAID;;AAED,MAAIZ,MAAM,CAACO,KAAP,CAAazB,MAAb,IAAuBkB,MAAM,CAACO,KAAP,CAAazB,MAAb,CAAoBJ,iBAA/C,EAAkE;AAChE2B,IAAAA,OAAO,GAAGJ,eAAe,CACvBI,OADuB,EAEvB,0BAFuB,EAGvB,qCAHuB,EAIvB,sBAJuB,CAAzB;AAMD;;AAED,MAAIL,MAAM,CAACa,KAAP,IAAgBb,MAAM,CAACa,KAAP,CAAaC,OAA7B,IAAwC,CAACd,MAAM,CAACO,KAAP,CAAa5B,OAA1D,EAAmE;AACjE0B,IAAAA,OAAO,CAACK,IAAR,CAAa;AACXC,MAAAA,OAAO,EAAE,qCADE;AAEXC,MAAAA,IAAI,EAAE;AAFK,KAAb;AAID;;AAED,SAAOR,WAAW,CAACC,OAAD,EAAU,OAAV,CAAlB;AACD","sourcesContent":["import joi from '@hapi/joi';\n\nconst schema = joi.object().keys({\n  ssl: joi\n    .object()\n    .keys({\n      letsEncryptEmail: joi.string().trim(),\n      crt: joi.string().trim(),\n      key: joi.string().trim(),\n      forceSSL: joi.bool()\n    })\n    .and('crt', 'key')\n    .without('letsEncryptEmail', ['crt', 'key'])\n    .or('letsEncryptEmail', 'crt', 'forceSSL'),\n  domains: joi.string().required(),\n  nginxServerConfig: joi.string(),\n  nginxLocationConfig: joi.string(),\n  clientUploadLimit: joi.string(),\n  servers: joi.object(),\n  loadBalancing: joi.bool(),\n  stickySessions: joi.bool(),\n  shared: joi.object().keys({\n    clientUploadLimit: joi.alternatives().try(joi.number(), joi.string()),\n    httpPort: joi.number(),\n    httpsPort: joi.number(),\n    nginxConfig: joi.string(),\n    nginxTemplate: joi.string(),\n    templatePath: joi.string(),\n    env: joi\n      .object()\n      .pattern(/[\\s\\S]*/, [joi.string(), joi.number(), joi.boolean()]),\n    envLetsEncrypt: joi\n      .object()\n      .keys({\n        ACME_CA_URI: joi.string().regex(new RegExp('^(http|https)://', 'i')),\n        DEBUG: joi.boolean(),\n        NGINX_PROXY_CONTAINER: joi.string()\n      })\n      .pattern(/[\\s\\S]*/, [joi.string(), joi.number(), joi.boolean()])\n  })\n});\n\nexport default function(config, {\n  addDepreciation,\n  combineErrorDetails,\n  VALIDATE_OPTIONS,\n  addLocation\n}) {\n  let details = [];\n\n  details = combineErrorDetails(\n    details,\n    joi.validate(config.proxy, schema, VALIDATE_OPTIONS)\n  );\n  if (\n    config.app &&\n    config.app.env &&\n    config.app.env.PORT &&\n    config.app.env.PORT !== 80 &&\n    !config.proxy.loadBalancing\n  ) {\n    details.push({\n      message: 'app.env.PORT is ignored when using the reverse proxy',\n      path: ''\n    });\n  }\n\n  if (config.proxy.shared && config.proxy.shared.clientUploadLimit) {\n    details = addDepreciation(\n      details,\n      'shared.clientUploadLimit',\n      'Use proxy.clientUploadLimit instead',\n      'https://git.io/vN5tn'\n    );\n  }\n\n  if (config.swarm && config.swarm.enabled && !config.proxy.servers) {\n    details.push({\n      message: 'is required when using Docker Swarm',\n      path: 'servers'\n    });\n  }\n\n  return addLocation(details, 'proxy');\n}\n"],"file":"validate.js"}