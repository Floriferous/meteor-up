{"version":3,"sources":["../../../src/plugins/proxy/index.js"],"names":["description","commands","_commands","validate","proxy","validator","prepareConfig","config","app","swarmEnabled","swarm","enabled","env","docker","servers","loadBalancing","Object","keys","forEach","key","privateIp","bind","VIRTUAL_PORT","imagePort","HTTP_FORWARDED_COUNT","networks","push","ROOT_URL","scrubConfig","scrubUrl","scrubDomains","domains","split","map","domain","trim","slice","join","LETSENCRYPT_EMAIL","VIRTUAL_HOST","LETSENCRYPT_HOST","shared","ssl","letsEncryptEmail","DEFAULT_HOST","configureServiceHook","api","getConfig","hooks","runCommand","swarmOptions","managers"],"mappings":"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","sourcesContent":["import * as _commands from './commands';\nimport { addProxyEnv, normalizeUrl } from './utils';\nimport { updateProxyForLoadBalancing } from './command-handlers';\nimport validator from './validate';\n\nexport const description = 'Setup and manage reverse proxy and ssl';\n\nexport const commands = _commands;\n\nexport const validate = {\n  proxy: validator\n};\n\n// eslint-disable-next-line complexity\nexport function prepareConfig(config) {\n  if (!config.app || !config.proxy) {\n    return config;\n  }\n\n  const swarmEnabled = config.swarm && config.swarm.enabled;\n\n  config.app.env = config.app.env || {};\n  config.app.docker = config.app.docker || {};\n  config.app.env = addProxyEnv(config, config.app.env);\n\n  if (config.app.servers && config.proxy.loadBalancing) {\n    Object.keys(config.app.servers).forEach(key => {\n      const privateIp = config.servers[key].privateIp;\n      if (privateIp) {\n        config.app.servers[key].bind = privateIp;\n      }\n    });\n  }\n\n  if (!swarmEnabled) {\n    config.app.env.VIRTUAL_PORT = config.app.docker.imagePort || 3000;\n  }\n\n  config.app.env.HTTP_FORWARDED_COUNT =\n  config.app.env.HTTP_FORWARDED_COUNT || 1;\n\n  if (swarmEnabled) {\n    config.app.docker.networks = config.app.docker.networks || [];\n    config.app.docker.networks.push('mup-proxy');\n  }\n\n  config.app.env.ROOT_URL = normalizeUrl(config, config.app.env);\n\n  return config;\n}\n\n\n// eslint-disable-next-line complexity\nexport function scrubConfig(config, { scrubUrl }) {\n  if (!config.proxy) {\n    return config;\n  }\n\n  function scrubDomains(domains) {\n    return domains.split(',').map(domain =>\n      // We temporarily add a protocol so it can be parsed as a url\n      scrubUrl(`http://${domain.trim()}`).slice(7)\n    ).join(',');\n  }\n\n  if (config.app && config.app.env) {\n    const {\n      LETSENCRYPT_EMAIL,\n      VIRTUAL_HOST,\n      LETSENCRYPT_HOST\n    } = config.app.env;\n\n    if (LETSENCRYPT_EMAIL) {\n      config.app.env.LETSENCRYPT_EMAIL = 'email@domain.com';\n    }\n    if (LETSENCRYPT_HOST) {\n      config.app.env.LETSENCRYPT_HOST = scrubDomains(LETSENCRYPT_HOST);\n    }\n    if (VIRTUAL_HOST) {\n      config.app.env.VIRTUAL_HOST = scrubDomains(VIRTUAL_HOST);\n    }\n  }\n\n  if (config.proxy) {\n    const {\n      shared,\n      ssl,\n      domains\n    } = config.proxy;\n\n    if (ssl && ssl.letsEncryptEmail) {\n      config.proxy.ssl.letsEncryptEmail = 'email@domain.com';\n    }\n    if (domains) {\n      config.proxy.domains = scrubDomains(domains);\n    }\n\n    if (shared && shared.env && shared.env.DEFAULT_HOST) {\n      shared.env.DEFAULT_HOST = scrubDomains(shared.env.DEFAULT_HOST);\n    }\n  }\n\n  return config;\n}\n\n// This hook runs when setting up the proxy or running mup reconfig\n// This creates a small container for the proxy to know about the service\nfunction configureServiceHook(api) {\n  const config = api.getConfig();\n\n  if (config.proxy && (api.swarmEnabled() || config.proxy.loadBalancing)) {\n    return updateProxyForLoadBalancing(api);\n  }\n}\n\nexport const hooks = {\n  'post.default.status'(api) {\n    if (api.getConfig().proxy) {\n      api.runCommand('proxy.status');\n    }\n  },\n  'post.setup'(api) {\n    if (api.getConfig().proxy) {\n      return api.runCommand('proxy.setup');\n    }\n  },\n  'post.reconfig': configureServiceHook,\n  'post.proxy.setup': configureServiceHook\n};\n\nexport function swarmOptions(config) {\n  if (config && config.proxy) {\n    return {\n      managers: Object.keys(config.proxy.servers)\n    };\n  }\n}\n"],"file":"index.js"}