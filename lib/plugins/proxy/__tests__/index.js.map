{"version":3,"sources":["../../../../src/plugins/proxy/__tests__/index.js"],"names":["servers","require","chai","use","chaiString","sh","config","silent","timeout","serverInfo","mymeteor","before","cd","path","resolve","os","tmpdir","out","exec","code","to","equal","output","have","entriesCount"],"mappings":"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","sourcesContent":["import chai, { expect } from 'chai';\nimport { describe, it } from 'mocha';\nimport chaiString from 'chai-string';\nimport os from 'os';\nimport path from 'path';\nimport { runSSHCommand } from '../../../utils';\nimport sh from 'shelljs';\nconst servers = require('../../../../tests/fixtures/servers');\n\nchai.use(chaiString);\n\nsh.config.silent = false;\n\ndescribe('module - proxy', function() {\n  this.timeout(60000000);\n  const serverInfo = servers.mymeteor;\n\n  before(async () => {\n    await runSSHCommand(\n      serverInfo,\n      'docker rm -f $(docker ps -a -q)'\n    );\n  });\n\n  describe('setup', () => {\n    it('should setup proxy on \"meteor\" vm', async () => {\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-3'));\n      let out = sh.exec('mup setup');\n\n      expect(out.code).to.equal(0);\n      expect(out.output).to.have.entriesCount('Setup proxy', 1);\n      expect(out.output).to.have.entriesCount('Start proxy: SUCCESS', 1);\n\n      out = await runSSHCommand(serverInfo, 'sudo docker ps');\n\n      expect(out.code).to.equal(0);\n      expect(out.output).to.have.entriesCount('mup-nginx-proxy', 2);\n      expect(out.output).to.have.entriesCount('mup-nginx-proxy-letsencrypt', 1);\n\n      out = await runSSHCommand(serverInfo, 'du --max-depth=2 /opt');\n      expect(out.output).to.have.entriesCount('/opt/mup-nginx-proxy', 5);\n      expect(out.output).to.have.entriesCount('/opt/mup-nginx-proxy/certs', 1);\n      expect(out.output).to.have.entriesCount('/opt/mup-nginx-proxy/mounted-certs', 1);\n      expect(out.output).to.have.entriesCount('/opt/mup-nginx-proxy/config', 1);\n      expect(out.output).to.have.entriesCount('/opt/mup-nginx-proxy/upstream', 1);\n\n      out = await runSSHCommand(serverInfo, 'ls /opt/mup-nginx-proxy/config');\n      expect(out.output).to.have.entriesCount('shared-config.sh', 1);\n      expect(out.output).to.have.entriesCount('env.list', 1);\n      expect(out.output).to.have.entriesCount('env_letsencrypt.list', 1);\n    });\n  });\n\n  describe('reconfig-shared', () => {\n    it('it should update shared settings', async () => {\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-3'));\n      sh.exec('mup setup');\n\n      let out = sh.exec('mup proxy reconfig-shared');\n      expect(out.code).to.equal(0);\n      expect(out.output).to.have.entriesCount('Configuring Proxy\\'s Shared Settings', 1);\n      expect(out.output).to.have.entriesCount('Start proxy: SUCCESS', 1);\n\n      out = await runSSHCommand(serverInfo, 'cat /opt/mup-nginx-proxy/config/shared-config.sh');\n      expect(out.output).to.have.entriesCount('CLIENT_UPLOAD_LIMIT=10M', 1);\n    });\n  });\n\n  describe('logs', () => {\n    it('should show nginx logs', () => {\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-3'));\n      sh.exec('mup setup');\n\n      const out = sh.exec('mup proxy logs --tail 2');\n      expect(out.output).to.have.entriesCount('Received event start for', 1);\n      expect(out.code).to.equal(0);\n    });\n  });\n});\n"],"file":"index.js"}