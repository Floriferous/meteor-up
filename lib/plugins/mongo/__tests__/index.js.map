{"version":3,"sources":["../../../../src/plugins/mongo/__tests__/index.js"],"names":["servers","require","sh","config","silent","timeout","cd","path","resolve","os","tmpdir","exec","out","code","to","be","equal","output","serverInfo","mymongo","sshOut"],"mappings":"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","sourcesContent":["import { countOccurences, runSSHCommand } from '../../../utils';\nimport { describe, it } from 'mocha';\nimport { expect } from 'chai';\nimport os from 'os';\nimport path from 'path';\nimport sh from 'shelljs';\nconst servers = require('../../../../tests/fixtures/servers');\n\nsh.config.silent = false;\n\ndescribe('module - mongo', function() {\n  this.timeout(600000);\n\n  describe('logs', () => {\n    it('should pull logs from \"meteor\" vm', async () => {\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n\n      sh.exec('mup setup');\n      const out = sh.exec('mup mongo logs');\n\n      expect(out.code).to.be.equal(0);\n      expect(countOccurences('MongoDB starting :', out.output)).to.be.equal(1);\n      expect(countOccurences('db version', out.output)).to.be.equal(1);\n    });\n  });\n\n  describe('setup', () => {\n    it('should setup mongodb on \"mongo\" vm', async () => {\n      const serverInfo = servers.mymongo;\n\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n\n      const out = sh.exec('mup mongo setup');\n\n      expect(out.code).to.be.equal(0);\n\n      expect(\n        countOccurences('Setup Environment: SUCCESS', out.output)\n      ).to.be.equal(1);\n      expect(\n        countOccurences('Copying Mongo Config: SUCCESS', out.output)\n      ).to.be.equal(1);\n\n      const sshOut = await runSSHCommand(serverInfo, 'tree -pufi /opt');\n\n      expect(sshOut.code).to.be.equal(0);\n      expect(countOccurences('mongo-start-new.sh', sshOut.output)).to.be.equal(1);\n    });\n  });\n\n  describe('start', () => {\n    it('should start mongodb on \"mongo\" vm', async () => {\n      const serverInfo = servers.mymongo;\n\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n      sh.exec('mup docker setup && mup mongo setup');\n\n      const out = sh.exec('mup mongo start');\n      expect(out.code).to.be.equal(0);\n\n      expect(countOccurences('Start Mongo: SUCCESS', out.output)).to.be.equal(\n        1\n      );\n      expect(\n        (await runSSHCommand(serverInfo, 'nc -z -v -w5 localhost 27017')).code\n      ).to.be.equal(0);\n    });\n\n    it('should allow configuring db name', async () => {\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n      const out = sh.exec('mup --config mup.db-name.js validate --show');\n\n      expect(out.code).to.be.equal(0);\n\n      expect(countOccurences('mongodb://mongodb:27017/test-db', out.output)).to.be.equal(\n        1\n      );\n    });\n  });\n\n  describe('stop', () => {\n    it('should stop mongodb on \"mongo\" vm', async () => {\n      const serverInfo = servers.mymongo;\n\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n      sh.exec('mup docker setup && mup mongo setup && mup mongo start');\n\n      const out = sh.exec('mup mongo stop');\n\n      expect(out.code).to.be.equal(0);\n\n      expect(countOccurences('Stop Mongo: SUCCESS', out.output)).to.be.equal(1);\n      expect(\n        (await runSSHCommand(serverInfo, 'nc -z -v -w5 localhost 27017')).code\n      ).to.be.equal(1);\n    });\n  });\n});\n"],"file":"index.js"}