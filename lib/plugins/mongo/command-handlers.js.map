{"version":3,"sources":["../../../src/plugins/mongo/command-handlers.js"],"names":["log","logs","api","args","getArgs","sessions","getSessions","shift","getDockerLogs","setup","mongoConfig","getConfig","mongo","console","mongoSessions","meteorSessions","length","_host","list","nodemiral","taskList","executeScript","script","resolvePath","__dirname","copy","src","dest","vars","mongoVersion","version","mongoDbDir","runTaskList","verbose","start","stop","shell","config","mongoServer","Object","keys","servers","server","sshOptions","_createSSHOptions","dbName","app","name","conn","Client","on","exec","pty","err","stream","end","process","exit","stdin","setRawMode","pipe","stdout","stderr","setWindow","rows","columns","connect","status","output","dockerStatus","runSSHCommand","mongoCommand","mongoStatus","JSON","parse","e","display","statusHelpers","StatusDisplay","addLine","show","connections","current","storageEngine","containerStatus","State","Status","statusColor","createdTime","Created","restartCount","RestartCount","restartCountColor","Restarting","Running","hour","upTime","Date","FinishedAt","getTime","host","getOptions","overview"],"mappings":"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","sourcesContent":["import { Client } from 'ssh2';\nimport debug from 'debug';\nimport nodemiral from '@zodern/nodemiral';\n\nconst log = debug('mup:module:mongo');\n\nexport function logs(api) {\n  log('exec => mup mongo logs');\n\n  const args = api.getArgs();\n  const sessions = api.getSessions(['mongo']);\n\n  // remove mongo from args sent to docker\n  args.shift();\n\n  return api.getDockerLogs('mongodb', sessions, args);\n}\n\nexport function setup(api) {\n  log('exec => mup mongo setup');\n  const mongoConfig = api.getConfig().mongo;\n\n  if (!mongoConfig) {\n    // could happen when running \"mup mongo setup\"\n    console.log(\n      'Not setting up built-in mongodb since there is no mongo config'\n    );\n\n    return;\n  }\n\n  const mongoSessions = api.getSessions(['mongo']);\n  const meteorSessions = api.getSessions(['app']);\n\n  if (meteorSessions.length !== 1) {\n    console.log(\n      'To use mup built-in mongodb setup, you should have only one meteor app server. To have more app servers, use an external mongodb setup'\n    );\n\n    return;\n  } else if (mongoSessions[0]._host !== meteorSessions[0]._host) {\n    console.log(\n      'To use mup built-in mongodb setup, you should have both meteor app and mongodb on the same server'\n    );\n\n    return;\n  }\n\n  const list = nodemiral.taskList('Setup Mongo');\n\n  list.executeScript('Setup Environment', {\n    script: api.resolvePath(__dirname, 'assets/mongo-setup.sh')\n  });\n\n  list.copy('Copying Mongo Config', {\n    src: api.resolvePath(__dirname, 'assets/templates/start.sh'),\n    dest: '/opt/mongodb/mongo-start-new.sh',\n    vars: {\n      mongoVersion: mongoConfig.version,\n      mongoDbDir: '/var/lib/mongodb'\n    }\n  });\n\n  const sessions = api.getSessions(['mongo']);\n\n  return api.runTaskList(list, sessions, { verbose: api.verbose });\n}\n\nexport function start(api) {\n  log('exec => mup mongo start');\n\n  const mongoSessions = api.getSessions(['mongo']);\n  const meteorSessions = api.getSessions(['app']);\n\n  if (\n    meteorSessions.length !== 1 ||\n    mongoSessions[0]._host !== meteorSessions[0]._host\n  ) {\n    log('Skipping mongodb start. Incompatible config');\n\n    return;\n  }\n\n  const list = nodemiral.taskList('Start Mongo');\n\n  list.executeScript('Start Mongo', {\n    script: api.resolvePath(__dirname, 'assets/mongo-start.sh')\n  });\n\n  const sessions = api.getSessions(['mongo']);\n\n  return api.runTaskList(list, sessions, { verbose: api.verbose });\n}\n\nexport function stop(api) {\n  log('exec => mup mongo stop');\n  const list = nodemiral.taskList('Stop Mongo');\n\n  list.executeScript('Stop Mongo', {\n    script: api.resolvePath(__dirname, 'assets/mongo-stop.sh')\n  });\n\n  const sessions = api.getSessions(['mongo']);\n\n  return api.runTaskList(list, sessions, { verbose: api.verbose });\n}\n\nexport function shell(api) {\n  const config = api.getConfig();\n\n  const mongoServer = Object.keys(config.mongo.servers)[0];\n  const server = config.servers[mongoServer];\n  const sshOptions = api._createSSHOptions(server);\n\n  const dbName = config.app.name;\n\n  const conn = new Client();\n  conn.on('ready', () => {\n    conn.exec(`docker exec -it mongodb mongo ${dbName}`, {\n      pty: true\n    }, (err, stream) => {\n      if (err) {\n        throw err;\n      }\n\n      stream.on('close', () => {\n        conn.end();\n        process.exit();\n      });\n\n      process.stdin.setRawMode(true);\n      process.stdin.pipe(stream);\n\n      stream.pipe(process.stdout);\n      stream.stderr.pipe(process.stderr);\n      stream.setWindow(process.stdout.rows, process.stdout.columns);\n\n      process.stdout.on('resize', () => {\n        stream.setWindow(process.stdout.rows, process.stdout.columns);\n      });\n    });\n  }).connect(sshOptions);\n}\n\nexport async function status(api) {\n  const config = api.getConfig();\n\n  if (!config.mongo) {\n    return;\n  }\n  const mongoServer = Object.keys(config.mongo.servers)[0];\n  const server = config.servers[mongoServer];\n\n  let { output: dockerStatus } = await api.runSSHCommand(\n    server,\n    'docker inspect mongodb --format \"{{json .}}\"'\n  );\n  const mongoCommand = '\"JSON.stringify(db.runCommand({serverStatus: 1, metrics: 0, wiredTiger: 1}))\"';\n  let {\n    output: mongoStatus\n  } = await api.runSSHCommand(\n    server,\n    `docker exec mongodb mongo --eval ${mongoCommand} --quiet`\n  );\n\n  try {\n    mongoStatus = JSON.parse(mongoStatus);\n    dockerStatus = JSON.parse(dockerStatus);\n  } catch (e) {\n    const display = new api.statusHelpers.StatusDisplay(\n      'Mongo Status'\n    );\n    display.addLine(' Stopped', 'red');\n    display.show();\n\n    return;\n  }\n\n  const mongoVersion = mongoStatus.version;\n  const connections = mongoStatus.connections.current;\n  const storageEngine = mongoStatus.storageEngine.name;\n\n  const containerStatus = dockerStatus.State.Status;\n  let statusColor = 'green';\n  const createdTime = dockerStatus.Created;\n  const restartCount = dockerStatus.RestartCount;\n  let restartCountColor = 'green';\n\n  if (dockerStatus.State.Restarting) {\n    statusColor = 'yellow';\n  } else if (dockerStatus.State.Running !== true) {\n    statusColor = 'red';\n  }\n\n  const hour = 1000 * 60 * 60;\n  const upTime = new Date(dockerStatus.State.FinishedAt).getTime() -\n    new Date(dockerStatus.Created).getTime();\n\n  if (restartCount > 0 && upTime / hour <= restartCount) {\n    restartCountColor = 'red';\n  } else if (restartCount > 1) {\n    restartCountColor = 'yellow';\n  }\n\n  const display = new api.statusHelpers.StatusDisplay('Mongo Status');\n  display.addLine(`${containerStatus} on server ${server.host}`, statusColor);\n  display.addLine(`Restarted ${restartCount} times`, restartCountColor);\n  display.addLine(`Running since ${createdTime}`);\n  display.addLine(`Version ${mongoVersion}`);\n  display.addLine(`Connections: ${connections}`);\n  display.addLine(`Storage Engine: ${storageEngine}`);\n  display.show(api.getOptions().overview);\n}\n"],"file":"command-handlers.js"}