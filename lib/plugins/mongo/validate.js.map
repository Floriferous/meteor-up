{"version":3,"sources":["../../../src/plugins/mongo/validate.js"],"names":["schema","joi","object","keys","oplog","bool","port","number","dbName","string","version","servers","required","externalMongoUrl","appConfig","result","env","MONGO_URL","mongoUrl","periodExists","indexOf","atExists","push","message","path","config","combineErrorDetails","serversExist","addLocation","VALIDATE_OPTIONS","origionalConfig","_origionalConfig","details","validationErrors","validate","mongo","app","meteor"],"mappings":";;;;;;;AAAA;;;;AAEA,MAAMA,MAAM,GAAGC,aAAIC,MAAJ,GAAaC,IAAb,CAAkB;AAC/B;AACA;AACA;AACAC,EAAAA,KAAK,EAAEH,aAAII,IAAJ,EAJwB;AAK/BC,EAAAA,IAAI,EAAEL,aAAIM,MAAJ,EALyB;AAM/BC,EAAAA,MAAM,EAAEP,aAAIQ,MAAJ,EANuB;AAO/BC,EAAAA,OAAO,EAAET,aAAIQ,MAAJ,EAPsB;AAQ/BE,EAAAA,OAAO,EAAEV,aAAIC,MAAJ,GAAaC,IAAb,GAAoBS,QAApB;AARsB,CAAlB,CAAf;;AAWA,SAASC,gBAAT,CAA0BC,SAA1B,EAAqC;AACnC,QAAMC,MAAM,GAAG,EAAf;;AAEA,MAAI,CAACD,SAAD,IAAc,CAACA,SAAS,CAACE,GAAzB,IAAgC,CAACF,SAAS,CAACE,GAAV,CAAcC,SAAnD,EAA8D;AAC5D,WAAOF,MAAP;AACD;;AAED,QAAMG,QAAQ,GAAGJ,SAAS,CAACE,GAAV,CAAcC,SAA/B,CAPmC,CASnC;;AACA,QAAME,YAAY,GAAGD,QAAQ,CAACE,OAAT,CAAiB,GAAjB,IAAwB,CAAC,CAA9C,CAVmC,CAWnC;;AACA,QAAMC,QAAQ,GAAGH,QAAQ,CAACE,OAAT,CAAiB,GAAjB,IAAwB,CAAC,CAA1C;;AAEA,MAAKD,YAAY,IAAIE,QAArB,EAAgC;AAC9BN,IAAAA,MAAM,CAACO,IAAP,CAAY;AACVC,MAAAA,OAAO,EAAE,mHADC;AAEVC,MAAAA,IAAI,EAAE;AAFI,KAAZ;AAID;;AAED,SAAOT,MAAP;AACD;;AAEc,kBACbU,MADa,EAEb;AACEC,EAAAA,mBADF;AAEEC,EAAAA,YAFF;AAGEC,EAAAA,WAHF;AAIEC,EAAAA;AAJF,CAFa,EAQb;AACA,QAAMC,eAAe,GAAGL,MAAM,CAACM,gBAA/B;AACA,MAAIC,OAAO,GAAG,EAAd;;AAEA,QAAMC,gBAAgB,GAAGhC,aAAIiC,QAAJ,CAAaT,MAAM,CAACU,KAApB,EAA2BnC,MAA3B,EAAmC6B,gBAAnC,CAAzB;;AACAG,EAAAA,OAAO,GAAGN,mBAAmB,CAACM,OAAD,EAAUC,gBAAV,CAA7B;AACAD,EAAAA,OAAO,GAAGN,mBAAmB,CAC3BM,OAD2B,EAE3BL,YAAY,CAACF,MAAM,CAACd,OAAR,EAAiBc,MAAM,CAACU,KAAP,CAAaxB,OAA9B,CAFe,CAA7B;AAIAqB,EAAAA,OAAO,GAAGN,mBAAmB,CAC3BM,OAD2B,EAE3BnB,gBAAgB,CAACiB,eAAe,CAACM,GAAhB,IAAuBN,eAAe,CAACO,MAAxC,CAFW,CAA7B;AAKA,SAAOT,WAAW,CAACI,OAAD,EAAU,OAAV,CAAlB;AACD","sourcesContent":["import joi from '@hapi/joi';\n\nconst schema = joi.object().keys({\n  // TODO: mongo.oplog and mongo.port is unused,\n  // but was part of the example config.\n  // decide what to do with it\n  oplog: joi.bool(),\n  port: joi.number(),\n  dbName: joi.string(),\n  version: joi.string(),\n  servers: joi.object().keys().required()\n});\n\nfunction externalMongoUrl(appConfig) {\n  const result = [];\n\n  if (!appConfig || !appConfig.env || !appConfig.env.MONGO_URL) {\n    return result;\n  }\n\n  const mongoUrl = appConfig.env.MONGO_URL;\n\n  // Detect IP Addresses and domain names\n  const periodExists = mongoUrl.indexOf('.') > -1;\n  // Detect username:password@domain.com\n  const atExists = mongoUrl.indexOf('@') > -1;\n\n  if ( periodExists || atExists ) {\n    result.push({\n      message: 'It looks like app.env.MONGO_URL is for an external database. Remove the `mongo` object to use external databases.',\n      path: ''\n    });\n  }\n\n  return result;\n}\n\nexport default function(\n  config,\n  {\n    combineErrorDetails,\n    serversExist,\n    addLocation,\n    VALIDATE_OPTIONS\n  }\n) {\n  const origionalConfig = config._origionalConfig;\n  let details = [];\n\n  const validationErrors = joi.validate(config.mongo, schema, VALIDATE_OPTIONS);\n  details = combineErrorDetails(details, validationErrors);\n  details = combineErrorDetails(\n    details,\n    serversExist(config.servers, config.mongo.servers)\n  );\n  details = combineErrorDetails(\n    details,\n    externalMongoUrl(origionalConfig.app || origionalConfig.meteor)\n  );\n\n  return addLocation(details, 'mongo');\n}\n"],"file":"validate.js"}