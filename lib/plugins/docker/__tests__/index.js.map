{"version":3,"sources":["../../../../src/plugins/docker/__tests__/index.js"],"names":["sh","config","silent","servers","require","timeout","checkDocker","name","serverInfo","cd","os","tmpdir","out","exec","assert","equal","code","num","output","sshOut"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEAA,iBAAGC,MAAH,CAAUC,MAAV,GAAmB,KAAnB;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,oCAAD,CAAvB;;AAEA,qBAAS,iBAAT,EAA4B,YAAW;AACrC,OAAKC,OAAL,CAAa,OAAb;AAEA,uBAAS,OAAT,EAAkB,MAAM;AACtB;AACA;AACA;AACA,aAASC,WAAT,CAAqBC,IAArB,EAA2B;AACzB;AACA,YAAMC,UAAU,GAAGL,OAAO,CAAE,KAAII,IAAK,EAAX,CAA1B;AAEA,aAAO,kBAAiB;AACtB,aAAKF,OAAL,CAAa,KAAb;;AAEAL,yBAAGS,EAAH,CAAM,wBAAYC,YAAGC,MAAH,EAAZ,EAAyB,iBAAzB,CAAN;;AACA,cAAMC,GAAG,GAAGZ,iBAAGa,IAAH,CAAQ,kBAAR,CAAZ;;AACAC,wBAAOC,KAAP,CAAaH,GAAG,CAACI,IAAjB,EAAuB,CAAvB;;AAEA,cAAMC,GAAG,GAAG,4BAAgB,uBAAhB,EAAyCL,GAAG,CAACM,MAA7C,CAAZ;;AACAJ,wBAAOC,KAAP,CAAaE,GAAb,EAAkB,CAAlB;;AAEA,cAAME,MAAM,GAAG,MAAM,0BAAcX,UAAd,EAA0B,cAA1B,CAArB;;AACAM,wBAAOC,KAAP,CAAaI,MAAM,CAACH,IAApB,EAA0B,CAA1B;AACD,OAZD;AAaD;;AAED,mBAAG,sCAAH,EAA2CV,WAAW,CAAC,QAAD,CAAtD;AACA,mBAAG,qCAAH,EAA0CA,WAAW,CAAC,OAAD,CAArD;AACA,mBAAG,qCAAH,EAA0CA,WAAW,CAAC,OAAD,CAArD;AACD,GA1BD;AA2BD,CA9BD","sourcesContent":["import { countOccurences, resolvePath, runSSHCommand } from '../../../utils';\nimport { describe, it } from 'mocha';\nimport assert from 'assert';\nimport os from 'os';\nimport sh from 'shelljs';\n\nsh.config.silent = false;\nconst servers = require('../../../../tests/fixtures/servers');\n\ndescribe('module - docker', function() {\n  this.timeout(6000000);\n\n  describe('setup', () => {\n    // reuse this function for 3 tests below\n    // TODO break this into multiple functions\n    // so parts can be used for other tests\n    function checkDocker(name) {\n      // TODO get server name form mup.js file\n      const serverInfo = servers[`my${name}`];\n\n      return async function() {\n        this.timeout(60000);\n\n        sh.cd(resolvePath(os.tmpdir(), 'tests/project-1'));\n        const out = sh.exec('mup docker setup');\n        assert.equal(out.code, 0);\n\n        const num = countOccurences('Setup Docker: SUCCESS', out.output);\n        assert.equal(num, 1);\n\n        const sshOut = await runSSHCommand(serverInfo, 'which docker');\n        assert.equal(sshOut.code, 0);\n      };\n    }\n\n    it('should install docker on \"meteor\" vm', checkDocker('meteor'));\n    it('should install docker on \"mongo\" vm', checkDocker('mongo'));\n    it('should install docker on \"proxy\" vm', checkDocker('proxy'));\n  });\n});\n"],"file":"index.js"}