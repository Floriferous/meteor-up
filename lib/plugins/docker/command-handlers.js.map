{"version":3,"sources":["../../../src/plugins/docker/command-handlers.js"],"names":["log","uniqueSessions","api","servers","getConfig","sessions","getSessions","swarmEnabled","getSessionsForServers","Object","keys","reduce","prev","curr","map","session","_host","indexOf","push","setup","config","list","nodemiral","taskList","executeScript","script","resolvePath","__dirname","vars","privateRegistry","privateDockerRegistry","length","runTaskList","verbose","then","setupSwarm","serverInfo","getServerInfo","currentManagers","desiredManagers","swarmInfo","managersToAdd","managersToRemove","managersToKeep","host","shift","serverInfoStale","nodes","currentNodes","currentLabels","desiredLabels","wantedNodes","nodesToAdd","token","result","item","swarmToken","managerIP","nodeIDs","curriedFindNodeId","findNodeId","managerIDs","toRemove","toAdd","data","node","server","console","error","label","restart","removeSwarm","ps","args","getArgs","runSSHCommand","join","output","chalk","magenta","blue","status","results","values","concurrency","lines","versions","overallColor","green","forEach","dockerStatus","color","code","red","version","trim","versionColor","yellow","manager","update"],"mappings":"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","sourcesContent":["import { checkVersion, shouldShowDockerWarning } from './utils';\nimport {\n  curry,\n  difference,\n  intersection\n} from 'lodash';\nimport {\n  demoteManagers,\n  diffLabels,\n  findNodeId,\n  initSwarm,\n  joinNodes,\n  promoteNodes,\n  updateLabels\n} from './swarm';\n\nimport chalk from 'chalk';\nimport debug from 'debug';\nimport { map } from 'bluebird';\nimport nodemiral from '@zodern/nodemiral';\n\nconst log = debug('mup:module:docker');\n\nfunction uniqueSessions(api) {\n  const { servers } = api.getConfig();\n  const sessions = api.getSessions(['app', 'mongo', 'proxy']);\n\n  if (api.swarmEnabled()) {\n    return api.getSessionsForServers(Object.keys(servers));\n  }\n\n  return sessions.reduce(\n    (prev, curr) => {\n      if (prev.map(session => session._host).indexOf(curr._host) === -1) {\n        prev.push(curr);\n      }\n\n      return prev;\n    }, []\n  );\n}\n\nexport function setup(api) {\n  log('exec => mup docker setup');\n  const config = api.getConfig();\n  const swarmEnabled = api.swarmEnabled();\n  const servers = Object.keys(config.servers || {});\n\n  const list = nodemiral.taskList('Setup Docker');\n\n  list.executeScript('Setup Docker', {\n    script: api.resolvePath(__dirname, 'assets/docker-setup.sh'),\n    vars: {\n      privateRegistry: config.privateDockerRegistry\n    }\n  });\n\n  const sessions = swarmEnabled ?\n    api.getSessionsForServers(servers) :\n    uniqueSessions(api);\n\n  if (sessions.length === 0) {\n    // There are no servers, so we can skip running the list\n    return;\n  }\n\n  return api\n    .runTaskList(list, sessions, {\n      verbose: api.verbose\n    })\n    .then(() => setupSwarm(api));\n}\n\nexport async function setupSwarm(api) {\n  const config = api.getConfig();\n\n  if (!api.swarmEnabled()) {\n    return;\n  }\n\n  let serverInfo = await api.getServerInfo();\n  const {\n    currentManagers,\n    desiredManagers\n  } = await api.swarmInfo();\n\n  log('currentManagers', currentManagers);\n  log('wantedManagers', desiredManagers);\n\n  const managersToAdd = difference(desiredManagers, currentManagers);\n  const managersToRemove = difference(currentManagers, desiredManagers);\n\n  // These managers are safe to run tasks on that require a manager\n  // This array is modified as managers are added and removed\n  const managersToKeep = intersection(currentManagers, desiredManagers);\n\n  log('managers to add', managersToAdd);\n  log('managers to remove', managersToRemove);\n  log('managers keeping', managersToKeep);\n\n  if (currentManagers.length === 0) {\n    log('Creating swarm cluster');\n    const host = config.servers[managersToAdd[0]].host;\n\n    await initSwarm(managersToAdd[0], host, api);\n\n    managersToKeep.push(managersToAdd.shift());\n    log('finished creating cluster');\n    api.serverInfoStale();\n  } else if (managersToKeep.length === 0) {\n    // We can run tasks on the managers being removed until\n    // the new managers are added\n    managersToKeep.push(managersToRemove[0]);\n  }\n\n  // refresh server info after updating managers\n  serverInfo = await api.getServerInfo();\n\n  const {\n    nodes: currentNodes,\n    currentLabels,\n    desiredLabels\n  } = await api.swarmInfo();\n  const wantedNodes = Object.keys(config.servers);\n  const nodesToAdd = difference(wantedNodes, currentNodes);\n\n  log('current nodes', currentNodes);\n  log('adding nodes', nodesToAdd);\n\n  if (nodesToAdd.length > 0) {\n    const token = Object.keys(serverInfo)\n      .reduce((result, item) => result || serverInfo[item].swarmToken, null);\n    const managerIP = config.servers[desiredManagers[0]].host;\n\n    await joinNodes(nodesToAdd, token, managerIP, api);\n    api.serverInfoStale();\n  }\n\n  const {\n    nodeIDs\n  } = await api.swarmInfo();\n  const curriedFindNodeId = curry(findNodeId)(nodeIDs);\n\n  log('remaining managers to add', managersToAdd);\n  if (managersToAdd.length > 0) {\n    const managerIDs = managersToAdd\n      .map(curriedFindNodeId);\n\n    await promoteNodes(managersToKeep[0], managerIDs, api);\n\n    if (managersToKeep[0] === managersToRemove[0]) {\n      // There were no managers being kept, so we were only able\n      // to use the managers that will be removed. We can now use\n      // the newly promoted managers.\n      managersToKeep[0] = managersToAdd[0];\n    }\n  }\n\n  if (managersToRemove.length > 0) {\n    await demoteManagers(\n      managersToKeep[0],\n      managersToRemove.map(curriedFindNodeId),\n      api\n    );\n    api.serverInfoStale();\n  }\n\n  // Update tags\n  let { toRemove, toAdd } = diffLabels(currentLabels, desiredLabels);\n\n  log('current labels', currentLabels);\n  log('desired labels', desiredLabels);\n  log('adding labels', toAdd);\n  log('removing labels', toRemove);\n\n  if (toRemove.length > 0 || toAdd.length > 0) {\n    toRemove = toRemove.map(data => {\n      data.node = curriedFindNodeId(data.server);\n\n      if (!data.node) {\n        console.error(`Unable to remove \"${data.label}\" label for server \"${data.server}\": Server doesn't have a node id.`);\n      }\n\n      return data;\n    });\n\n    toAdd = toAdd.map(data => {\n      data.node = curriedFindNodeId(data.server);\n\n      if (!data.node) {\n        console.log(`Unable to update \"${data.label}\" label for server \"${data.server}\": Server doesn't have a node id.`);\n      }\n\n      return data;\n    });\n\n    await updateLabels(api, managersToKeep[0], toAdd, toRemove);\n  }\n}\n\nexport function restart(api) {\n  const list = nodemiral.taskList('Restart Docker Daemon');\n\n  list.executeScript('Restart Docker', {\n    script: api.resolvePath(__dirname, 'assets/docker-restart.sh')\n  });\n\n  const sessions = uniqueSessions(api);\n\n  return api.runTaskList(list, sessions, {\n    verbose: api.verbose\n  });\n}\n\nexport function removeSwarm(api) {\n  const list = nodemiral.taskList('Destroy Swarm Cluster');\n  const servers = Object.keys(api.getConfig().servers);\n  const sessions = api.getSessionsForServers(servers);\n\n  list.executeScript('Leave Swarm Cluster', {\n    script: api.resolvePath(__dirname, 'assets/swarm-leave.sh')\n  });\n\n  return api.runTaskList(list, sessions, {\n    verbose: api.verbose\n  });\n}\n\nexport async function ps(api) {\n  const args = api.getArgs();\n\n  args.shift();\n  const sessions = uniqueSessions(api);\n\n  for (const session of sessions) {\n    await api.runSSHCommand(session, `sudo docker ${args.join(' ')} 2>&1`).then(({ output, host }) => {\n      console.log(chalk.magenta(`[${host}]`) + chalk.blue(` docker ${args.join(' ')}`));\n      console.log(output);\n    });\n  }\n}\n\nexport async function status(api) {\n  const config = api.getConfig();\n  const swarmEnabled = api.swarmEnabled();\n\n  if (!config.servers) {\n    return;\n  }\n\n  const results = await map(\n    Object.values(config.servers),\n    server => api.runSSHCommand(server, 'sudo docker version --format \"{{.Server.Version}}\"'),\n    { concurrency: 2 }\n  );\n\n  const lines = [];\n  const versions = [];\n  let overallColor = chalk.green;\n\n  results.forEach(result => {\n    let dockerStatus = 'Running';\n    let color = 'green';\n\n    if (result.code === 1) {\n      dockerStatus = 'Stopped';\n      color = 'red';\n      overallColor = chalk.red;\n    } else if (result.code === 127) {\n      dockerStatus = 'Not installed';\n      color = 'red';\n      overallColor = chalk.red;\n    }\n\n    const version = result.output.trim().length > 1 ? result.output.trim() : '';\n    let versionColor = chalk.green;\n\n    if (!checkVersion(version)) {\n      overallColor = chalk.red;\n      versionColor = chalk.red;\n    }\n\n    versions.push({\n      version,\n      host: result.host\n    });\n\n    lines.push(` - ${result.host}: ${versionColor(version)} ${chalk[color](dockerStatus)}`);\n  });\n\n\n  console.log(overallColor('\\n=> Docker Status'));\n  if (shouldShowDockerWarning(versions)) {\n    console.log(` - ${chalk.yellow('All Dockers don\\'t have the same version')}`);\n  }\n  console.log(lines.join('\\n'));\n\n  if (!swarmEnabled) {\n    return;\n  }\n\n  const { currentManagers, nodes } = await api.swarmInfo();\n  const list = [];\n\n  currentManagers.forEach(manager => {\n    list.push(` - ${manager} (Manager)`);\n  });\n\n  difference(nodes, currentManagers).forEach(node => {\n    list.push(` - ${node || 'Unknown server'}`);\n  });\n\n  if (currentManagers.length === 0) {\n    console.log('No swarm managers');\n\n    return;\n  }\n\n  // TODO: show swarm health:\n  // https://docs.docker.com/engine/swarm/admin_guide/#monitor-swarm-health\n\n  console.log(`Swarm Nodes: ${nodes.length}`);\n  console.log(list.join('\\n'));\n}\n\nexport async function update(api) {\n  const config = api.getConfig();\n  const swarmEnabled = api.swarmEnabled();\n  const servers = Object.keys(config.servers);\n\n  const list = nodemiral.taskList('Update Docker');\n\n  list.executeScript('Update Docker', {\n    script: api.resolvePath(__dirname, 'assets/docker-update.sh')\n  });\n\n  const sessions = swarmEnabled ?\n    api.getSessionsForServers(servers) :\n    uniqueSessions(api);\n\n  return api.runTaskList(list, sessions, {\n    verbose: api.verbose\n  })\n    .then(() => setupSwarm(api));\n}\n"],"file":"command-handlers.js"}