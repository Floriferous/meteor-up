{"version":3,"sources":["../../../src/plugins/docker/swarm.js"],"names":["log","findNodeId","nodeIDs","serverName","isEqual","swarmErrorSuggestions","err","message","indexOf","solution","executeSwarmTaskList","list","manager","api","servers","Array","sessions","getSessionsForServers","runTaskList","verbose","getVerbose","catch","initSwarm","host","nodemiral","taskList","executeScript","script","resolvePath","__dirname","vars","promoteNodes","nodeIds","demoteManagers","joinNodes","token","managerIP","diffLabels","currentLabels","desiredLabels","toRemove","toAdd","knownLabels","Object","values","reduce","result","labels","push","keys","forEach","server","label","value","entries","includes","updateLabels","JSON","stringify"],"mappings":"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","sourcesContent":["import {\n  findKey,\n  isEqual,\n  partial\n} from 'lodash';\nimport debug from 'debug';\nimport nodemiral from '@zodern/nodemiral';\n\nconst log = debug('mup:docker:swarm');\n\nexport function findNodeId(nodeIDs, serverName) {\n  return findKey(nodeIDs, partial(isEqual, serverName));\n}\n\nexport function swarmErrorSuggestions(err) {\n  if (err.message.indexOf('certificate has expired or is not yet valid') > -1) {\n    err.solution = 'Make sure the servers all have the same time.';\n  }\n\n  throw err;\n}\n\nexport function executeSwarmTaskList(list, manager, api) {\n  const servers = manager instanceof Array ? manager : [manager];\n  const sessions = api.getSessionsForServers(servers);\n\n  return api\n    .runTaskList(list, sessions, { verbose: api.getVerbose() })\n    .catch(swarmErrorSuggestions);\n}\n\nexport function initSwarm(manager, host, api) {\n  const list = nodemiral.taskList('Setting Up Docker Swarm');\n\n  log('creating manager', manager);\n  list.executeScript('Creating Manager', {\n    script: api.resolvePath(__dirname, 'assets/init-swarm.sh'),\n    vars: {\n      host\n    }\n  });\n\n  return executeSwarmTaskList(list, manager, api);\n}\n\nexport function promoteNodes(manager, nodeIds, api) {\n  const list = nodemiral.taskList('Promoting Nodes to Managers');\n\n  log('promoting nodes:', nodeIds);\n  list.executeScript('Promoting Nodes', {\n    script: api.resolvePath(__dirname, 'assets/swarm-promote.sh'),\n    vars: {\n      nodeIds\n    }\n  });\n\n  return executeSwarmTaskList(list, manager, api);\n}\n\nexport function demoteManagers(manager, nodeIds, api) {\n  const list = nodemiral.taskList('Demoting Swarm Managers');\n\n  log('demoting nodes:', nodeIds, manager);\n\n  list.executeScript('Demoting Managers', {\n    script: api.resolvePath(__dirname, 'assets/swarm-demote.sh'),\n    vars: {\n      nodeIds\n    }\n  });\n\n  return executeSwarmTaskList(list, manager, api);\n}\n\nexport function joinNodes(servers, token, managerIP, api) {\n  const list = nodemiral.taskList('Add Swarm Nodes');\n\n  list.executeScript('Joining node', {\n    script: api.resolvePath(__dirname, 'assets/swarm-join.sh'),\n    vars: {\n      token,\n      managerIP\n    }\n  });\n\n  return executeSwarmTaskList(list, servers, api);\n}\n\nexport function diffLabels(currentLabels, desiredLabels) {\n  const toRemove = [];\n  const toAdd = [];\n  const knownLabels = Object.values(desiredLabels).reduce((result, labels) => {\n    result.push(...Object.keys(labels));\n\n    return result;\n  }, []);\n\n  // check for labels to add or update\n  Object.keys(desiredLabels).forEach(server => {\n    for (const [label, value] of Object.entries(desiredLabels[server])) {\n      if (!currentLabels[server] || currentLabels[server][label] !== value) {\n        toAdd.push({ server, label, value });\n      }\n    }\n  });\n\n  // check for labels no longer used\n  Object.keys(currentLabels).forEach(server => {\n    for (const [label] of Object.entries(currentLabels[server])) {\n      if (!knownLabels.includes(label)) {\n        // Only remove labels that mup knows about from plugins\n        continue;\n      }\n      if (!desiredLabels[server] || !(label in desiredLabels[server])) {\n        toRemove.push({ server, label });\n      }\n    }\n  });\n\n  return { toRemove, toAdd };\n}\n\nexport function updateLabels(api, manager, toAdd, toRemove) {\n  const list = nodemiral.taskList('Update Swarm Labels');\n\n  log(`Adding labels ${JSON.stringify(toAdd)}`);\n\n  list.executeScript('Update Labels', {\n    script: api.resolvePath(__dirname, 'assets/swarm-labels.sh'),\n    vars: {\n      toAdd,\n      toRemove\n    }\n  });\n\n  return executeSwarmTaskList(list, manager, api);\n}\n"],"file":"swarm.js"}