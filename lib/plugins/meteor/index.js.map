{"version":3,"sources":["../../../src/plugins/meteor/index.js"],"names":["description","commands","_commands","validate","meteor","_validator","app","config","utils","type","prepareConfig","docker","image","dockerImage","stopAppDuringPrepareBundle","imagePort","meteorEnabled","api","getConfig","onlyMeteorEnabled","commandNames","index","thenHandler","length","runCommand","then","hooks","scrubConfig","map","path","join","update","scrubUrl","node","mongo","url","split","pop","push","swarmOptions","label","name","value","servers","Object","keys","labels"],"mappings":"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","sourcesContent":["import * as _commands from './commands';\nimport _validator from './validate';\nimport { defaultsDeep } from 'lodash';\nimport traverse from 'traverse';\n\nexport const description = 'Deploy and manage meteor apps';\n\nexport const commands = _commands;\n\nexport const validate = {\n  meteor: _validator,\n  app(config, utils) {\n    if (typeof config.meteor === 'object' || (config.app && config.app.type !== 'meteor')) {\n      // The meteor validator will check the config\n      // Or the config is telling a different plugin to handle deployment\n      return [];\n    }\n\n    return _validator(config, utils);\n  }\n};\n\nexport function prepareConfig(config) {\n  if (!config.app || config.app.type !== 'meteor') {\n    return config;\n  }\n\n  config.app.docker = defaultsDeep(config.app.docker, {\n    image: config.app.dockerImage || 'kadirahq/meteord',\n    stopAppDuringPrepareBundle: true\n  });\n\n  delete config.app.dockerImage;\n\n  // If imagePort is not set, use port 3000 to simplify using\n  // images that run the app with a non-root user.\n  // Port 80 was the traditional port used by kadirahq/meteord\n  // and meteorhacks/meteord, but they allow the PORT env\n  // variable to override it.\n  config.app.docker.imagePort = config.app.docker.imagePort || 3000;\n\n  return config;\n}\n\nfunction meteorEnabled(api) {\n  const config = api.getConfig();\n\n  return config.app && config.app.type === 'meteor';\n}\n\nfunction onlyMeteorEnabled(...commandNames) {\n  return function(api) {\n    let index = 0;\n\n    function thenHandler() {\n      index += 1;\n      if (commandNames.length > index) {\n        return api.runCommand(commandNames[index]).then(thenHandler);\n      }\n    }\n\n    if (meteorEnabled(api)) {\n      return api.runCommand(commandNames[index]).then(thenHandler);\n    }\n  };\n}\n\nexport const hooks = {\n  'post.default.setup': onlyMeteorEnabled('meteor.setup'),\n  'post.default.deploy': onlyMeteorEnabled('meteor.deploy'),\n  'post.default.start': onlyMeteorEnabled('meteor.start'),\n  'post.default.stop': onlyMeteorEnabled('meteor.stop'),\n  'post.default.logs': onlyMeteorEnabled('meteor.logs'),\n  'post.default.reconfig': onlyMeteorEnabled('meteor.envconfig', 'meteor.start'),\n  'post.default.restart': onlyMeteorEnabled('meteor.restart'),\n  'post.default.status': onlyMeteorEnabled('meteor.status')\n};\n\nexport function scrubConfig(config, utils) {\n  if (config.meteor) {\n    delete config.meteor;\n  }\n\n  if (config.app) {\n    // eslint-disable-next-line\n    config.app = traverse(config.app).map(function () {\n      const path = this.path.join('.');\n\n      switch (path) {\n        case 'name':\n          return this.update('my-app');\n        case 'buildOptions.server':\n          return this.update(utils.scrubUrl(this.node));\n\n        case 'env.ROOT_URL':\n          return this.update(utils.scrubUrl(this.node));\n\n        case 'env.MONGO_URL':\n          if (config.mongo) {\n            const url = this.node.split('/');\n\n            url.pop();\n            url.push('my-app');\n\n            return this.update(url.join('/'));\n          }\n\n          return this.update(utils.scrubUrl(this.node));\n\n        // no default\n      }\n    });\n  }\n\n  return config;\n}\n\nexport function swarmOptions(config) {\n  if (config && config.app && config.app.type === 'meteor') {\n    const label = {\n      name: `mup-app-${config.app.name}`,\n      value: 'true',\n      servers: Object.keys(config.app.servers)\n    };\n\n    return {\n      labels: [label]\n    };\n  }\n}\n"],"file":"index.js"}