{"version":3,"sources":["../../../src/plugins/meteor/prepare-bundle.js"],"names":["prepareBundleSupported","dockerConfig","supportedImages","prepareBundle","find","supportedImage","image","indexOf","createDockerFile","appConfig","env","docker","useBuildKit","escapedEnv","syntax","args","Object","entries","map","key","value","join","copy","trim","prepareBundleLocally","buildLocation","api","app","privateDockerRegistry","getConfig","startTime","Date","error","Error","solution","bundlePath","resolvePath","nodeVersion","name","dockerFile","dockerIgnoreContent","console","log","fs","writeFileSync","username","host","stdin","password","process","DOCKER_BUILDKIT","cwd","endTime","durationText","getTime"],"mappings":"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","sourcesContent":["import {\n  escapeEnvQuotes,\n  getImagePrefix,\n  getNodeVersion,\n  runCommand\n} from './utils';\nimport fs from 'fs';\n\nexport function prepareBundleSupported(dockerConfig) {\n  const supportedImages = ['abernix/meteord', 'zodern/meteor'];\n\n  if ('prepareBundle' in dockerConfig) {\n    return dockerConfig.prepareBundle;\n  }\n\n  return supportedImages.find(\n    supportedImage => dockerConfig.image.indexOf(supportedImage) === 0\n  ) || false;\n}\n\nexport function createDockerFile(appConfig) {\n  const {\n    env,\n    docker: {\n      useBuildKit,\n      image\n    } = {}\n  } = appConfig;\n  const escapedEnv = escapeEnvQuotes(env);\n\n  const syntax = useBuildKit ? '# syntax=docker/dockerfile:1-experimental' : '';\n  const args = Object.entries(escapedEnv).map(([key, value]) => `ARG ${key}=\"${value}\"`).join('\\n');\n  const copy = useBuildKit ?\n    'RUN --mount=type=bind,target=/tmp/__mup-bundle tar -xzf /tmp/__mup-bundle/bundle.tar.gz -C /built_app --strip-components=1' :\n    'COPY ./ /built_app';\n\n  return `\n    ${syntax}\n    FROM ${image}\n    RUN mkdir /built_app || true\n    ${args}\n    # TODO: build instructions\n    ${copy}\n    RUN cd /built_app/programs/server && \\\n      npm install --unsafe-perm\n  `.trim();\n}\n\nexport async function prepareBundleLocally(\n  buildLocation, api\n) {\n  const {\n    app: appConfig,\n    privateDockerRegistry\n  } = api.getConfig();\n  const startTime = new Date();\n\n  if (!appConfig.docker.useBuildKit) {\n    const error = new Error('useBuildKit must be enabled when using prepareBundleLocally');\n    error.solution = 'Set app.docker.useBuildKit to true in your config.';\n    throw error;\n  }\n\n  const bundlePath = api.resolvePath(buildLocation, 'bundle.tar.gz');\n  const nodeVersion = await getNodeVersion(bundlePath);\n  const image = `${getImagePrefix(privateDockerRegistry)}${appConfig.name}`;\n  const dockerFile = createDockerFile(appConfig);\n  const dockerIgnoreContent = `\n  *\n  !bundle.tar.gz\n  `;\n\n  console.log('=> Writing Dockerfile');\n  fs.writeFileSync(api.resolvePath(buildLocation, 'Dockerfile'), dockerFile);\n  fs.writeFileSync(api.resolvePath(buildLocation, 'dockerignore'), dockerIgnoreContent);\n\n  console.log('');\n  console.log('=> Updating base image');\n  await runCommand('docker', ['login', '--password-stdin', '--username', privateDockerRegistry.username, privateDockerRegistry.host], { stdin: privateDockerRegistry.password });\n  await runCommand('docker', ['pull', appConfig.docker.image]);\n\n  console.log('');\n  console.log('=> Build image');\n\n  if (appConfig.docker.useBuildKit) {\n    process.env.DOCKER_BUILDKIT = '1';\n  }\n\n  await runCommand('docker', [\n    'build',\n    '-t', `${image}:build`,\n    '.',\n    '--build-arg', `NODE_VERSION=${nodeVersion}`\n  ], { cwd: buildLocation });\n\n  console.log('');\n  console.log('=> Updating tags');\n\n  // Pull latest image so we can tag is as previous\n  // TODO: use docker registry api instead\n  await runCommand('docker', ['pull', `${image}:latest`]);\n  await runCommand('docker', [\n    'tag',\n    `${image}:latest`,\n    `${image}:previous`\n  ]);\n  await runCommand('docker', [\n    'tag',\n    `${image}:build`,\n    `${image}:latest`\n  ]);\n  await runCommand('docker', [\n    'push',\n    `${image}:previous`\n  ]);\n  await runCommand('docker', [\n    'push',\n    `${image}:latest`\n  ]);\n\n  const endTime = new Date();\n  const durationText = `in ${endTime.getTime() - startTime.getTime()}ms`;\n\n  console.log('=> Finished preparing bundle', durationText);\n}\n"],"file":"prepare-bundle.js"}