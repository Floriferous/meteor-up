{"version":3,"sources":["../../../src/plugins/meteor/status.js"],"names":["getInformation","server","appName","api","runSSHCommand","then","host","output","info","stoppedResult","statusColor","status","jsonOutput","slice","indexOf","JSON","parse","trim","e","State","Restarting","Running","publishedPorts","exposedPorts","NetworkSettings","Object","keys","Ports","forEach","key","push","HostPort","env","Config","Env","envVariable","name","split","restartCount","RestartCount","restartColor","created","Created","Status","values","checkUrlLocally","appConfig","port","result","portString","domain","VIRTUAL_HOST","protocol","ROOT_URL","startsWith","axios","head","timeout","getCheckAddress","servers","bind","docker","checkUrls","PORT","remote","inDocker","local","Promise","all","imagePort","inDockerResult","code","remoteResult","localResult","inDockerColor","remoteColor","localColor","createPortInfoLines","statusDisplay","length","exposedSection","addLine","publishedSection","withColor","color","text","chalk","displayAvailability","urlResult","section"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport chalk from 'chalk';\n\nexport function getInformation(server, appName, api) {\n  return api.runSSHCommand(server, `docker inspect ${appName} --format \"{{json .}}\"`)\n    // eslint-disable-next-line complexity\n    .then(({ host, output }) => {\n      let info;\n      const stoppedResult = {\n        statusColor: 'red',\n        status: 'Stopped',\n        host: server.host\n      };\n\n      try {\n        // Sometimes there are warnings shown before the JSON output\n        const jsonOutput = output.slice(output.indexOf('{'));\n        info = JSON.parse(jsonOutput.trim());\n      } catch (e) {\n        return stoppedResult;\n      }\n\n      if (!info.State) {\n        return stoppedResult;\n      }\n\n      let statusColor = 'green';\n      if (info.State.Restarting) {\n        statusColor = 'yellow';\n      } else if (!info.State.Running) {\n        statusColor = 'red';\n      }\n\n      const publishedPorts = [];\n      const exposedPorts = [];\n      if (info.NetworkSettings) {\n        Object.keys(info.NetworkSettings.Ports || {}).forEach(key => {\n          if (info.NetworkSettings.Ports[key]) {\n            publishedPorts.push(`${key} => ${info.NetworkSettings.Ports[key][0].HostPort}`);\n          } else {\n            exposedPorts.push(key);\n          }\n        });\n      }\n\n      const env = {};\n      if (info.Config && info.Config.Env) {\n        info.Config.Env.forEach(envVariable => {\n          const name = envVariable.split('=')[0];\n          env[name] = envVariable;\n        });\n      }\n\n      const restartCount = info.RestartCount;\n      let restartColor = 'green';\n      if (restartCount > 0) {\n        restartColor = 'yellow';\n      } else if (restartCount > 2) {\n        restartColor = 'red';\n      }\n\n      return {\n        host,\n        created: info.Created,\n        status: info.State.Status,\n        statusColor,\n        env: Object.values(env),\n        restartCount,\n        restartColor,\n        publishedPorts,\n        exposedPorts\n      };\n    });\n}\n\nasync function checkUrlLocally(server, appConfig, port) {\n  let result;\n\n  let portString = `:${port}`;\n  let domain = server.host;\n  if (appConfig.env.VIRTUAL_HOST) {\n    domain = appConfig.env.VIRTUAL_HOST.split(',')[0];\n    // TODO: this should use the proxy's port if the user changed it\n    portString = '';\n  }\n\n  let protocol = 'http://';\n\n  if (appConfig.env.ROOT_URL.startsWith('https://')) {\n    protocol = 'https://';\n  }\n\n  try {\n    result = await axios.head(`${protocol}${domain}${portString}`, {\n      timeout: 5000\n    });\n  } catch (e) {\n    result = false;\n  }\n\n  return result;\n}\n\nfunction getCheckAddress(server, appConfig) {\n  if (\n    appConfig.servers &&\n    appConfig.servers[server.name] &&\n    appConfig.servers[server.name].bind\n  ) {\n    return appConfig.servers[server.name].bind;\n  }\n\n  if (appConfig.docker && appConfig.docker.bind) {\n    return appConfig.docker.bind;\n  }\n\n  return '127.0.0.1';\n}\n\nexport async function checkUrls(server, appConfig, api) {\n  const port = appConfig.servers[server.name].env ?\n    appConfig.servers[server.name].env.PORT :\n    appConfig.env.PORT;\n\n  const [\n    remote,\n    inDocker,\n    local\n  ] = await Promise.all([\n    api.runSSHCommand(server, `curl ${getCheckAddress(server, appConfig)}:${port}`),\n    api.runSSHCommand(server, `docker exec ${appConfig.name} curl http://localhost:${appConfig.docker.imagePort}`),\n    checkUrlLocally(server, appConfig, port)\n  ]);\n  const inDockerResult = inDocker.code === 0;\n  const remoteResult = remote.code === 0;\n  const localResult = local !== false;\n\n  return {\n    inDocker: inDockerResult,\n    inDockerColor: inDockerResult ? 'green' : 'red',\n    remote: remoteResult,\n    remoteColor: remoteResult ? 'green' : 'red',\n    local: localResult,\n    localColor: localResult ? 'green' : 'red'\n  };\n}\n\nexport function createPortInfoLines(\n  exposedPorts = [], publishedPorts = [], statusDisplay\n) {\n  if (exposedPorts.length > 0) {\n    const exposedSection = statusDisplay.addLine('Exposed Ports:');\n    exposedPorts.forEach(port => {\n      exposedSection.addLine(`- ${port}`);\n    });\n  }\n\n  if (publishedPorts.length > 0) {\n    const publishedSection = statusDisplay.addLine('Published Ports (Inside Container => On Server):');\n    publishedPorts.forEach(port => {\n      publishedSection.addLine(`- ${port}`);\n    });\n  }\n}\n\nexport function withColor(color, text) {\n  return chalk[color](text);\n}\n\nexport function displayAvailability(result, urlResult, statusDisplay) {\n  if (result.publishedPorts && result.publishedPorts.length > 0) {\n    const section = statusDisplay.addLine(`App running at http://${result.host}:${result.publishedPorts[0].split('=>')[1].trim()}`);\n    section.addLine(`- Available in app's docker container: ${urlResult.inDocker}`, urlResult.inDockerColor);\n    section.addLine(`- Available on server: ${urlResult.remote}`, urlResult.remoteColor);\n    section.addLine(`- Available on local computer: ${urlResult.local}`, urlResult.localColor);\n  } else {\n    const section = statusDisplay.addLine('App available through reverse proxy');\n    section.addLine(`- Available in app's docker container: ${urlResult.inDocker}`, urlResult.inDockerColor);\n  }\n}\n"],"file":"status.js"}