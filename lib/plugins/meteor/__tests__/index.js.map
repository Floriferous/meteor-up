{"version":3,"sources":["../../../../src/plugins/meteor/__tests__/index.js"],"names":["chai","use","chaiString","sh","config","silent","servers","require","timeout","serverInfo","mymeteor","cd","path","resolve","os","tmpdir","out","exec","assert","equal","code","num","output","sshOut","to","have","entriesCount","sshOut2","checkDeploy","appText","port","num2","num3","networks","JSON","parse","NetworkSettings","Networks","Object","keys","deep","status","host"],"mappings":"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","sourcesContent":["import { before, describe, it } from 'mocha';\nimport chai, { expect } from 'chai';\nimport { countOccurences, runSSHCommand } from '../../../utils';\nimport assert from 'assert';\nimport chaiString from 'chai-string';\nimport os from 'os';\nimport path from 'path';\nimport sh from 'shelljs';\n\nchai.use(chaiString);\n\nsh.config.silent = false;\nconst servers = require('../../../../tests/fixtures/servers');\n\ndescribe('module - meteor', function() {\n  this.timeout(600000);\n\n  before(async () => {\n    const serverInfo = servers.mymeteor;\n    await runSSHCommand(\n      serverInfo,\n      'sudo docker rm -f $(sudo docker ps -a -q)'\n    );\n  });\n\n  describe('setup', () => {\n    it('should setup environment on \"meteor\" vm', async () => {\n      const serverInfo = servers.mymeteor;\n\n      await runSSHCommand(serverInfo, 'rm -rf /opt/myapp || :');\n      await runSSHCommand(\n        serverInfo,\n        'command -v tree >/dev/null 2>&1 || { sudo apt-get -qq update && sudo apt-get -qq install -y tree; }'\n      );\n\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n\n      const out = sh.exec('mup meteor setup');\n      assert.equal(out.code, 0);\n\n      const num = countOccurences('Setup Environment: SUCCESS', out.output);\n      assert.equal(num, 1);\n\n      const sshOut = await runSSHCommand(serverInfo, 'tree -pufid /opt');\n      expect(sshOut.output).to.have.entriesCount('/opt/myapp', 3);\n      expect(sshOut.output).to.have.entriesCount('/opt/myapp/config', 1);\n      expect(sshOut.output).to.have.entriesCount('/opt/myapp/tmp', 1);\n    });\n  });\n\n  describe('push', () => {\n    it('should push meteor app bundle to \"meteor\" vm', async () => {\n      const serverInfo = servers.mymeteor;\n\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n\n      sh.exec('mup docker setup');\n      sh.exec('mup meteor setup');\n\n      const out = sh.exec('mup meteor push --cached-build');\n      assert.equal(out.code, 0);\n\n      const num = countOccurences(\n        'Pushing Meteor App Bundle to the Server: SUCCESS',\n        out.output\n      );\n      assert.equal(num, 1);\n\n      const sshOut = await runSSHCommand(\n        serverInfo,\n        'ls -al /opt/myapp/tmp/bundle.tar.gz'\n      );\n      assert.equal(sshOut.code, 0);\n    });\n\n    it('should handle env vars with space during Prepare Bundle', async () => {\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n\n      sh.exec('mup docker setup');\n      sh.exec('mup meteor setup');\n\n      const out = sh.exec('mup --config mup.env-with-space.js meteor push --cached-build');\n      assert.equal(out.code, 0);\n\n      const num = countOccurences(\n        'Prepare Bundle: SUCCESS',\n        out.output\n      );\n      assert.equal(num, 1);\n    });\n  });\n\n  describe('envconfig', () => {\n    const serverInfo = servers.mymeteor;\n    it('should send the environment variables to \"meteor\" vm', async () => {\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n\n      sh.exec('mup meteor setup');\n\n      const out = sh.exec('mup meteor envconfig');\n      assert.equal(out.code, 0);\n\n      const num = countOccurences(\n        'Sending Environment Variables: SUCCESS',\n        out.output\n      );\n      assert.equal(num, 1);\n\n      const sshOut = await runSSHCommand(\n        serverInfo,\n        'ls -al /opt/myapp/config/env.list'\n      );\n      assert.equal(sshOut.code, 0);\n\n      const sshOut2 = await runSSHCommand(\n        serverInfo,\n        'ls -al /opt/myapp/config/start.sh'\n      );\n\n      assert.equal(sshOut2.code, 0);\n    });\n    it('should push server specific env variables', async () => {\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-2'));\n      sh.exec('mup meteor setup');\n\n      const out = sh.exec('mup meteor envconfig');\n\n      expect(out.code).to.equal(0);\n\n      const sshOut = await runSSHCommand(\n        serverInfo,\n        'cat /opt/myapp/config/env.list'\n      );\n\n      expect(sshOut.output).to.have.entriesCount('TEST=true', 1);\n    });\n  });\n\n  describe('start', () => {\n    const serverInfo = servers.mymeteor;\n\n    it('should start meteor on \"meteor\" vm', async () => {\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n\n      sh.exec(\n        'mup setup && mup meteor push --cached-build && mup meteor envconfig'\n      );\n      const out = sh.exec('mup meteor start');\n      assert.equal(out.code, 0);\n\n      const num = countOccurences('Start Meteor: SUCCESS', out.output);\n      assert.equal(num, 1);\n\n      const sshOut = await runSSHCommand(\n        serverInfo,\n        'curl localhost:80 && exit 0'\n      );\n      assert.equal(sshOut.code, 0);\n    });\n  });\n\n  describe('deploy', () => {\n    const serverInfo = servers.mymeteor;\n    before(async () => {\n      await runSSHCommand(\n        serverInfo,\n        'sudo docker network create mup-tests'\n      );\n    });\n\n    async function checkDeploy(out, appText, port = 80) {\n      assert.equal(out.code, 0);\n\n      const num = countOccurences(\n        'Sending Environment Variables: SUCCESS',\n        out.output\n      );\n      assert.equal(num, 1);\n\n      const num2 = countOccurences('Start Meteor: SUCCESS', out.output);\n      assert.equal(num2, 1);\n\n      const num3 = countOccurences(\n        'Pushing Meteor App Bundle to the Server: SUCCESS',\n        out.output\n      );\n      assert.equal(num3, 1);\n\n      const sshOut = await runSSHCommand(\n        serverInfo,\n        `curl localhost:${port} && exit 0`\n      );\n      assert.equal(sshOut.code, 0);\n      expect(sshOut.output).to.have.entriesCount(appText, 1);\n    }\n\n    it('should deploy meteor app on \"meteor\" vm', async () => {\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n\n      sh.exec('mup setup');\n      const out = sh.exec('mup meteor deploy --cached-build');\n\n      await checkDeploy(out, '<title>helloapp-new</title>');\n    });\n\n    it('should deploy app using Meteor 1.2', async () => {\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n\n      sh.exec('mup setup --config mup.old.js');\n      const out = sh.exec('mup meteor deploy --cached-build --config mup.old.js');\n      expect(out.code).to.equal(0);\n      await checkDeploy(out, '<title>helloapp</title>');\n    });\n\n    it('should connect to user networks', async () => {\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n      sh.exec('mup setup');\n\n      const out = sh.exec('mup deploy --cached-build --config mup.user-network.js');\n      const sshOut = await runSSHCommand(\n        serverInfo,\n        'sudo docker inspect myapp'\n      );\n      const networks = JSON.parse(sshOut.output)[0].NetworkSettings.Networks;\n\n      expect(Object.keys(networks)).to.deep.equal(['bridge', 'mup-tests']);\n      expect(out.code).to.equal(0);\n      await checkDeploy(out, '<title>helloapp-new</title>');\n    });\n\n    it('should verify deployment when not connected to bridge network', async () => {\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n      sh.exec('mup setup');\n\n      const out = sh.exec('mup deploy --cached-build --config mup.no-bridge.js');\n      const sshOut = await runSSHCommand(\n        serverInfo,\n        'sudo docker inspect myapp'\n      );\n      const networks = JSON.parse(sshOut.output)[0].NetworkSettings.Networks;\n      await checkDeploy(out, '<title>helloapp-new</title>');\n\n      expect(Object.keys(networks)).to.deep.equal(['mup-tests']);\n      expect(out.code).to.equal(0);\n    });\n\n    it('should use Docker buildkit when enabled', async () => {\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n      sh.exec('mup setup');\n\n      const out = sh.exec('mup meteor push --cached-build --config mup.buildkit.js --verbose');\n      expect(out.code).to.equal(0);\n      expect(out.output).to.have.entriesCount('#12 naming to docker.io/library/mup-myapp:build done', 1);\n      expect(out.output).to.have.entriesCount('Prepare Bundle: SUCCESS', 1);\n    });\n\n    it('should allow overriding PORT on specific servers', async () => {\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n\n      sh.exec('mup --config mup.override-port.js setup');\n      const out = sh.exec('mup meteor deploy --config mup.override-port.js --cached-build');\n\n      await checkDeploy(out, '<title>helloapp-new</title>', 4000);\n\n      const status = sh.exec('mup --config mup.override-port.js meteor status');\n      expect(status.output).to.have.entriesCount('- 3000/tcp => 4000', 1);\n      expect(status.output).to.have.entriesCount(`App running at http://${serverInfo.host}:4000`, 1);\n      expect(status.output).to.have.entriesCount('Available in app\\'s docker container: true', 1);\n      expect(status.output).to.have.entriesCount('Available on server: true', 1);\n    });\n  });\n\n  describe('logs', () => {\n    it('should pull the logs from \"meteor\" vm', async () => {\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n\n      const out = sh.exec('mup meteor logs --tail 2');\n      assert.equal(out.code, 0);\n    });\n  });\n\n  describe('stop', () => {\n    const serverInfo = servers.mymeteor;\n    it('should stop meteor app on \"meteor\" vm', async () => {\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n\n      sh.exec('mup setup && mup deploy --cached-build');\n      const out = sh.exec('mup meteor stop');\n      assert.equal(out.code, 0);\n\n      const num = countOccurences('Stop Meteor: SUCCESS', out.output);\n      assert.equal(num, 1);\n\n      const sshOut = await runSSHCommand(\n        serverInfo,\n        'curl localhost:80 && exit 0'\n      );\n      assert.equal(sshOut.code, 7);\n    });\n  });\n});\n"],"file":"index.js"}