{"version":3,"sources":["../../../../src/plugins/meteor/__tests__/swarm.js"],"names":["chai","use","chaiString","sh","config","silent","servers","require","cdSwarmProject","cd","path","resolve","os","tmpdir","checkRunning","serverInfo","mymeteor","sshService","code","to","equal","timeout","afterAll","exec","out","output","have","entriesCount","indexOf","be","greaterThan"],"mappings":"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","sourcesContent":["import chai, { expect } from 'chai';\nimport { describe, it } from 'mocha';\nimport chaiString from 'chai-string';\nimport os from 'os';\nimport path from 'path';\nimport { runSSHCommand } from '../../../utils';\nimport sh from 'shelljs';\n\nchai.use(chaiString);\nsh.config.silent = false;\nconst servers = require('../../../../tests/fixtures/servers');\n\nfunction cdSwarmProject() {\n  sh.cd(path.resolve(os.tmpdir(), 'tests/project-swarm'));\n}\n\nasync function checkRunning() {\n  const serverInfo = servers.mymeteor;\n\n  const sshService = await runSSHCommand(\n    serverInfo,\n    'sudo docker service inspect myapp-service'\n  );\n\n  expect(sshService.code).to.equal(0);\n\n  // TODO: for the app to run without repeatedly crashing\n  // we need to run a mongo instance that can be connected to\n  // from the swarm service\n  // const sshOut = await runSSHCommand(\n  //   serverInfo,\n  //   'curl localhost:80'\n  // );\n\n  // expect(sshOut.code).to.equal(0);\n}\n\ndescribe('module - meteor swarm', function() {\n  this.timeout(600000);\n\n  this.afterAll(() => {\n    cdSwarmProject();\n    sh.exec('mup docker destroy-cluster');\n  });\n\n  describe('envconfig', () => {\n    it('should not run when swarm is enabled', async () => {\n      cdSwarmProject();\n      sh.exec('mup setup && mup meteor push --cached-build');\n      const out = sh.exec('mup meteor envconfig');\n\n      expect(out.code).to.equal(0);\n      expect(out.output).to.have.entriesCount('Sending Environment Variables', 0);\n    });\n  });\n\n  describe('start', () => {\n    it('should create service', async () => {\n      cdSwarmProject();\n      sh.exec(\n        'mup setup && mup meteor push --cached-build'\n      );\n\n      const out = sh.exec('mup meteor start');\n\n      expect(out.code).to.equal(0);\n      await checkRunning();\n    });\n  });\n  describe('stop', () => {\n    it('should remove service', async () => {\n      const serverInfo = servers.mymeteor;\n\n      cdSwarmProject();\n      sh.exec(\n        'mup setup && mup meteor deploy --cached-build'\n      );\n\n      const out = sh.exec(\n        'mup meteor stop'\n      );\n\n      expect(out.output).to.have.entriesCount('Stop myapp-service: SUCCESS', 1);\n\n      const sshService = await runSSHCommand(\n        serverInfo,\n        'sudo docker service inspect myapp-service'\n      );\n\n      expect(sshService.code).to.equal(1);\n    });\n  });\n  describe('restart', () => {\n    it('should restart the service', async () => {\n      cdSwarmProject();\n      sh.exec(\n        'mup setup && mup meteor deploy --cached-build'\n      );\n\n      const out = sh.exec(\n        'mup meteor restart'\n      );\n\n      expect(out.output).to.have.entriesCount('Restart myapp-service: SUCCESS', 1);\n      await checkRunning();\n    });\n  });\n  describe('logs', () => {\n    it('should show service logs', async () => {\n      cdSwarmProject();\n      sh.exec(\n        'mup setup && mup meteor deploy --cached-build'\n      );\n      const out = sh.exec(\n        'mup meteor logs --tail 2'\n      );\n\n      expect(out.output.indexOf('=> Starting meteor app on port 3000')).to.be.greaterThan(-1);\n    });\n  });\n});\n"],"file":"swarm.js"}