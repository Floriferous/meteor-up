{"version":3,"sources":["../../../src/plugins/meteor/command-handlers.js"],"names":["log","logs","api","app","getConfig","swarmEnabled","console","error","process","exit","args","getArgs","shift","unshift","sessions","getDockerLogs","name","setup","config","list","nodemiral","taskList","executeScript","script","resolvePath","__dirname","vars","ssl","autogenerate","basePath","getBasePath","upload","copy","src","crt","dest","key","getSessions","runTaskList","verbose","build","appPath","path","buildOptions","rebuild","getOptions","buildLocation","getVerbose","push","runCommand","appConfig","privateDockerRegistry","bundlePath","archiveApp","docker","prepareBundleLocally","progressBar","enableUploadProgressBar","tag","data","getServerInfo","nodeVersion","appName","dockerImage","image","env","buildInstructions","stopApp","stopAppDuringPrepareBundle","useBuildKit","privateRegistry","imagePrefix","serverInfoStale","slice","series","envconfig","servers","proxy","bindAddress","opts","nginx","bind","dockerImageFrontendServer","imageFrontendServer","port","startHostVars","Object","keys","forEach","serverName","host","PORT","hostVars","sslConfig","logConfig","volumes","proxyConfig","nginxClientUploadLimit","clientUploadLimit","getSettings","undefined","settings","JSON","stringify","getSettingsFromPath","METEOR_SETTINGS","start","currentService","dockerServiceInfo","serverInfo","imageTag","tasks","addCreateOrUpdateService","deploy","then","stop","addStopService","restart","addRestartService","debugApp","serverOption","enabledSessions","filter","session","length","selectedHost","_host","find","join","exitCode","server","output","runSSHCommand","startOutput","ipAddress","startOutput2","trim","loggedConnection","forwardPort","localAddress","localPort","remoteAddress","remotePort","onError","onReady","onConnection","destroy","options","force","Promise","resolve","setTimeout","status","StatusDisplay","statusHelpers","overview","map","results","concurrency","urlResults","display","result","index","urlResult","section","addLine","statusColor","created","restartCount","restartColor","envSection","envVar","exposedPorts","publishedPorts","show"],"mappings":"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","sourcesContent":["import {\n  addStartAppTask,\n  checkAppStarted,\n  createEnv,\n  createServiceConfig,\n  currentImageTag,\n  escapeEnvQuotes,\n  getBuildOptions,\n  getImagePrefix,\n  getNodeVersion,\n  getSessions,\n  shouldRebuild\n} from './utils';\nimport buildApp, { archiveApp } from './build.js';\nimport { checkUrls, createPortInfoLines, displayAvailability, getInformation, withColor } from './status';\nimport { map, promisify } from 'bluebird';\nimport { prepareBundleLocally, prepareBundleSupported } from './prepare-bundle';\nimport debug from 'debug';\nimport nodemiral from '@zodern/nodemiral';\n\n\nconst log = debug('mup:module:meteor');\n\nexport async function logs(api) {\n  log('exec => mup meteor logs');\n  const {\n    app\n  } = api.getConfig();\n  const swarmEnabled = api.swarmEnabled();\n\n  if (!app) {\n    console.error('error: no configs found for meteor');\n    process.exit(1);\n  }\n\n  const args = api.getArgs();\n\n  if (args[0] === 'meteor') {\n    args.shift();\n  }\n  if (swarmEnabled) {\n    args.unshift('service');\n  }\n\n  const sessions = await getSessions(api);\n\n  return api.getDockerLogs(app.name, sessions, args, !swarmEnabled);\n}\n\nexport function setup(api) {\n  log('exec => mup meteor setup');\n  const config = api.getConfig().app;\n\n  if (!config) {\n    console.error('error: no configs found for meteor');\n    process.exit(1);\n  }\n\n  const list = nodemiral.taskList('Setup Meteor');\n\n  list.executeScript('Setup Environment', {\n    script: api.resolvePath(__dirname, 'assets/meteor-setup.sh'),\n    vars: {\n      name: config.name\n    }\n  });\n\n  if (config.ssl && typeof config.ssl.autogenerate !== 'object') {\n    const basePath = api.getBasePath();\n\n    if (config.ssl.upload !== false) {\n      list.executeScript('Cleaning up SSL Certificates', {\n        script: api.resolvePath(__dirname, 'assets/ssl-cleanup.sh'),\n        vars: {\n          name: config.name\n        }\n      });\n      list.copy('Copying SSL Certificate Bundle', {\n        src: api.resolvePath(basePath, config.ssl.crt),\n        dest: `/opt/${config.name}/config/bundle.crt`\n      });\n\n      list.copy('Copying SSL Private Key', {\n        src: api.resolvePath(basePath, config.ssl.key),\n        dest: `/opt/${config.name}/config/private.key`\n      });\n    }\n\n    list.executeScript('Verifying SSL Configurations', {\n      script: api.resolvePath(__dirname, 'assets/verify-ssl-config.sh'),\n      vars: {\n        name: config.name\n      }\n\n    });\n  }\n\n  const sessions = api.getSessions(['app']);\n\n  return api.runTaskList(list, sessions, { verbose: api.verbose });\n}\n\nexport async function build(api) {\n  const config = api.getConfig().app;\n  const appPath = api.resolvePath(api.getBasePath(), config.path);\n  const buildOptions = getBuildOptions(api);\n\n  const rebuild = shouldRebuild(api);\n\n  if (rebuild && api.getOptions()['cached-build']) {\n    console.log('Unable to use previous build. It doesn\\'t exist.');\n  } else if (!rebuild) {\n    console.log('Not building app. Using build from previous deploy at');\n    console.log(buildOptions.buildLocation);\n  }\n\n  if (rebuild) {\n    console.log('Building App Bundle Locally');\n    await buildApp(appPath, buildOptions, api.getVerbose(), api);\n  }\n}\n\nexport async function push(api) {\n  log('exec => mup meteor push');\n\n  await api.runCommand('meteor.build');\n  const {\n    app: appConfig,\n    privateDockerRegistry\n  } = api.getConfig();\n\n  if (!appConfig) {\n    console.error('error: no configs found for meteor');\n    process.exit(1);\n  }\n\n  const buildOptions = getBuildOptions(api);\n\n  const bundlePath = api.resolvePath(buildOptions.buildLocation, 'bundle.tar.gz');\n\n  if (shouldRebuild(api)) {\n    await promisify(archiveApp)(buildOptions.buildLocation, api);\n  }\n\n  if (appConfig.docker.prepareBundleLocally) {\n    return prepareBundleLocally(buildOptions.buildLocation, api);\n  }\n\n  const list = nodemiral.taskList('Pushing Meteor App');\n\n  list.copy('Pushing Meteor App Bundle to the Server', {\n    src: bundlePath,\n    dest: `/opt/${appConfig.name}/tmp/bundle.tar.gz`,\n    progressBar: appConfig.enableUploadProgressBar\n  });\n\n  if (prepareBundleSupported(appConfig.docker)) {\n    let tag = 'latest';\n\n    if (api.swarmEnabled()) {\n      const data = await api.getServerInfo();\n      tag = currentImageTag(data, appConfig.name) + 1;\n    }\n\n    const nodeVersion = await getNodeVersion(bundlePath);\n\n    list.executeScript('Prepare Bundle', {\n      script: api.resolvePath(\n        __dirname,\n        'assets/prepare-bundle.sh'\n      ),\n      vars: {\n        appName: appConfig.name,\n        dockerImage: appConfig.docker.image,\n        env: escapeEnvQuotes(appConfig.env),\n        buildInstructions: appConfig.docker.buildInstructions || [],\n        nodeVersion,\n        stopApp: appConfig.docker.stopAppDuringPrepareBundle,\n        useBuildKit: appConfig.docker.useBuildKit,\n        tag,\n        privateRegistry: privateDockerRegistry,\n        imagePrefix: getImagePrefix(privateDockerRegistry)\n      }\n    });\n\n    // After running Prepare Bundle, the list of images is out of date\n    api.serverInfoStale();\n  }\n\n  let sessions = api.getSessions(['app']);\n\n  // If we are using a private registry,\n  // we only need to build it once. All of the other servers\n  // can pull the image from the registry instead of rebuilding it\n  if (privateDockerRegistry) {\n    sessions = sessions.slice(0, 1);\n  }\n\n  return api.runTaskList(list, sessions, {\n    series: true,\n    verbose: api.verbose\n  });\n}\n\nexport function envconfig(api) {\n  log('exec => mup meteor envconfig');\n  const {\n    servers,\n    app,\n    proxy,\n    privateDockerRegistry\n  } = api.getConfig();\n\n  if (api.swarmEnabled()) {\n    // The `start` command handles updating the environment\n    // when swarm is enabled\n    return;\n  }\n\n  let bindAddress = '0.0.0.0';\n\n  if (!app) {\n    console.error('error: no configs found for meteor');\n    process.exit(1);\n  }\n\n  app.log = app.log || {\n    opts: {\n      'max-size': '100m',\n      'max-file': 10\n    }\n  };\n\n  app.nginx = app.nginx || {};\n\n  if (app.docker && app.docker.bind) {\n    bindAddress = app.docker.bind;\n  }\n\n  if (app.dockerImageFrontendServer) {\n    app.docker.imageFrontendServer = app.dockerImageFrontendServer;\n  }\n  if (!app.docker.imageFrontendServer) {\n    app.docker.imageFrontendServer = 'meteorhacks/mup-frontend-server';\n  }\n\n  if (app.ssl) {\n    app.ssl.port = app.ssl.port || 443;\n  }\n\n  const startHostVars = {};\n\n  Object.keys(app.servers).forEach(serverName => {\n    const host = servers[serverName].host;\n    const vars = {};\n    if (app.servers[serverName].bind) {\n      vars.bind = app.servers[serverName].bind;\n    }\n    if (app.servers[serverName].env && app.servers[serverName].env.PORT) {\n      vars.port = app.servers[serverName].env.PORT;\n    }\n    startHostVars[host] = vars;\n  });\n\n  const list = nodemiral.taskList('Configuring App');\n\n  list.copy('Pushing the Startup Script', {\n    src: api.resolvePath(__dirname, 'assets/templates/start.sh'),\n    dest: `/opt/${app.name}/config/start.sh`,\n    hostVars: startHostVars,\n    vars: {\n      imagePrefix: getImagePrefix(privateDockerRegistry),\n      appName: app.name,\n      port: app.env.PORT || 80,\n      bind: bindAddress,\n      sslConfig: app.ssl,\n      logConfig: app.log,\n      volumes: app.volumes,\n      docker: app.docker,\n      proxyConfig: proxy,\n      nginxClientUploadLimit: app.nginx.clientUploadLimit || '10M',\n      privateRegistry: privateDockerRegistry\n    }\n  });\n\n  const env = createEnv(app, api.getSettings());\n  const hostVars = {};\n\n  Object.keys(app.servers).forEach(key => {\n    const host = servers[key].host;\n    if (app.servers[key].env) {\n      hostVars[host] = {\n        env: {\n          ...app.servers[key].env,\n          // We treat the PORT specially and do not pass it to the container\n          PORT: undefined\n        }\n      };\n    }\n    if (app.servers[key].settings) {\n      const settings = JSON.stringify(api.getSettingsFromPath(\n        app.servers[key].settings));\n\n      if (hostVars[host]) {\n        hostVars[host].env.METEOR_SETTINGS = settings;\n      } else {\n        hostVars[host] = { env: { METEOR_SETTINGS: settings } };\n      }\n    }\n  });\n\n  list.copy('Sending Environment Variables', {\n    src: api.resolvePath(__dirname, 'assets/templates/env.list'),\n    dest: `/opt/${app.name}/config/env.list`,\n    hostVars,\n    vars: {\n      env: env || {},\n      appName: app.name\n    }\n  });\n\n  const sessions = api.getSessions(['app']);\n\n  return api.runTaskList(list, sessions, {\n    series: true,\n    verbose: api.verbose\n  });\n}\n\nexport async function start(api) {\n  log('exec => mup meteor start');\n  const config = api.getConfig().app;\n  const swarmEnabled = api.swarmEnabled();\n\n  if (!config) {\n    console.error('error: no configs found for meteor');\n    process.exit(1);\n  }\n\n  const list = nodemiral.taskList('Start Meteor');\n\n  if (swarmEnabled) {\n    const currentService = await api.dockerServiceInfo(config.name);\n    const serverInfo = await api.getServerInfo();\n    const imageTag = currentImageTag(serverInfo, config.name);\n\n    // TODO: make it work when the reverse proxy isn't enabled\n    api.tasks.addCreateOrUpdateService(\n      list,\n      createServiceConfig(api, imageTag),\n      currentService\n    );\n  } else {\n    addStartAppTask(list, api);\n    checkAppStarted(list, api);\n  }\n\n  const sessions = await getSessions(api);\n\n  return api.runTaskList(list, sessions, {\n    series: true,\n    verbose: api.verbose\n  });\n}\n\nexport function deploy(api) {\n  log('exec => mup meteor deploy');\n\n  // validate settings and config before starting\n  api.getSettings();\n  const config = api.getConfig().app;\n\n  if (!config) {\n    console.error('error: no configs found for meteor');\n    process.exit(1);\n  }\n\n  return api\n    .runCommand('meteor.push')\n    .then(() => api.runCommand('default.reconfig'));\n}\n\nexport async function stop(api) {\n  log('exec => mup meteor stop');\n  const config = api.getConfig().app;\n  const swarmEnabled = api.swarmEnabled();\n\n  if (!config) {\n    console.error('error: no configs found for meteor');\n    process.exit(1);\n  }\n\n  const list = nodemiral.taskList('Stop Meteor');\n\n  if (swarmEnabled) {\n    api.tasks.addStopService(list, {\n      name: config.name\n    });\n  } else {\n    list.executeScript('Stop Meteor', {\n      script: api.resolvePath(__dirname, 'assets/meteor-stop.sh'),\n      vars: {\n        appName: config.name\n      }\n    });\n  }\n\n  const sessions = await getSessions(api);\n\n  return api.runTaskList(list, sessions, { verbose: api.verbose });\n}\n\nexport async function restart(api) {\n  const list = nodemiral.taskList('Restart Meteor');\n  const {\n    app: appConfig\n  } = api.getConfig();\n  const sessions = await getSessions(api);\n\n  if (api.swarmEnabled()) {\n    api.tasks.addRestartService(list, { name: appConfig.name });\n  } else {\n    list.executeScript('Stop Meteor', {\n      script: api.resolvePath(__dirname, 'assets/meteor-stop.sh'),\n      vars: {\n        appName: appConfig.name\n      }\n    });\n    addStartAppTask(list, api);\n    checkAppStarted(list, api);\n  }\n\n\n  return api.runTaskList(list, sessions, {\n    series: true,\n    verbose: api.verbose\n  });\n}\n\nexport async function debugApp(api) {\n  const {\n    servers,\n    app\n  } = api.getConfig();\n  let serverOption = api.getArgs()[2];\n\n  // Check how many sessions are enabled. Usually is all servers,\n  // but can be reduced by the `--servers` option\n  const enabledSessions = api.getSessions(['app'])\n    .filter(session => session);\n\n  if (!(serverOption in app.servers)) {\n    if (enabledSessions.length === 1) {\n      const selectedHost = enabledSessions[0]._host;\n      serverOption = Object.keys(app.servers).find(\n        name => servers[name].host === selectedHost\n      );\n    } else {\n      console.log('mup meteor debug <server>');\n      console.log('Available servers are:\\n', Object.keys(app.servers).join('\\n '));\n      process.exitCode = 1;\n\n      return;\n    }\n  }\n\n  const server = servers[serverOption];\n  console.log(`Setting up to debug app running on ${serverOption}`);\n\n  const {\n    output\n  } = await api.runSSHCommand(server, `docker exec -t ${app.name} sh -c 'kill -s USR1 $(pidof -s node)'`);\n\n  // normally is blank, but if something went wrong\n  // it will have the error message\n  console.log(output);\n\n  const {\n    output: startOutput\n  } = await api.runSSHCommand(server, `sudo docker rm -f meteor-debug; sudo docker run -d --name meteor-debug --network=container:${app.name} alpine/socat TCP-LISTEN:9228,fork TCP:127.0.0.1:9229`);\n  if (api.getVerbose()) {\n    console.log('output from starting meteor-debug', startOutput);\n  }\n\n  const {\n    output: ipAddress\n  } = await api.runSSHCommand(server, `sudo docker inspect --format=\"{{ range .NetworkSettings.Networks }} {{.IPAddress }} {{ end }}\" ${app.name} | head -n 1`);\n\n  if (api.getVerbose()) {\n    console.log('container address', ipAddress);\n  }\n\n  const {\n    output: startOutput2\n  } = await api.runSSHCommand(server, `sudo docker rm -f meteor-debug-2; sudo docker run -d --name meteor-debug-2 -p 9227:9227 alpine/socat TCP-LISTEN:9227,fork TCP:${ipAddress.trim()}:9228`);\n\n  if (api.getVerbose()) {\n    console.log('output from starting meteor-debug-2', startOutput2);\n  }\n\n  let loggedConnection = false;\n\n  api.forwardPort({\n    server,\n    localAddress: '0.0.0.0',\n    localPort: 9229,\n    remoteAddress: '127.0.0.1',\n    remotePort: 9227,\n    onError(error) {\n      console.error(error);\n    },\n    onReady() {\n      console.log('Connected to server');\n      console.log('');\n      console.log('Debugger listening on ws://127.0.0.1:9229');\n      console.log('');\n      console.log('To debug:');\n      console.log('1. Open chrome://inspect in Chrome');\n      console.log('2. Select \"Open dedicated DevTools for Node\"');\n      console.log('3. Wait a minute while it connects and loads the app.');\n      console.log('   When it is ready, the app\\'s files will appear in the Sources tab');\n      console.log('');\n      console.log('Warning: Do not use breakpoints when debugging a production server.');\n      console.log('They will pause your server when hit, causing it to not handle methods or subscriptions.');\n      console.log('Use logpoints or something else that does not pause the server');\n      console.log('');\n      console.log('The debugger will be enabled until the next time the app is restarted,');\n      console.log('though only accessible while this command is running');\n    },\n    onConnection() {\n      if (!loggedConnection) {\n        // It isn't guaranteed the debugger is connected, but not many\n        // other tools will try to connect to port 9229.\n        console.log('');\n        console.log('Detected by debugger');\n        loggedConnection = true;\n      }\n    }\n  });\n}\n\nexport async function destroy(api) {\n  const config = api.getConfig();\n  const options = api.getOptions();\n\n  if (!options.force) {\n    console.error('The destroy command completely removes the app from the server');\n    console.error('If you are sure you want to continue, use the `--force` option');\n    process.exit(1);\n  } else {\n    console.log('The app will be completely removed from the server.');\n    console.log('Waiting 5 seconds in case you want to cancel by pressing ctr + c');\n    await new Promise(resolve => setTimeout(resolve, 1000 * 5));\n  }\n\n  const list = nodemiral.taskList('Destroy App');\n  const sessions = await getSessions(api);\n\n  if (api.swarmEnabled()) {\n    console.error('Destroying app when using swarm is not implemented');\n    process.exit(1);\n  }\n\n  list.executeScript('Stop App', {\n    script: api.resolvePath(__dirname, 'assets/meteor-stop.sh'),\n    vars: {\n      appName: config.app.name\n    }\n  });\n\n  list.executeScript('Destroy App', {\n    script: api.resolvePath(__dirname, 'assets/meteor-destroy.sh'),\n    vars: {\n      name: config.app.name\n    }\n  });\n\n  return api.runTaskList(list, sessions, {\n    series: true,\n    verbose: api.verbose\n  });\n}\n\nexport async function status(api) {\n  const config = api.getConfig();\n  const {\n    StatusDisplay\n  } = api.statusHelpers;\n  const overview = api.getOptions().overview;\n  const servers = Object.keys(config.app.servers)\n    .map(key => ({\n      ...config.servers[key],\n      name: key\n    }));\n\n  const results = await map(\n    servers,\n    server => getInformation(server, config.app.name, api),\n    { concurrency: 2 }\n  );\n  const urlResults = await map(\n    servers,\n    server => checkUrls(server, config.app, api),\n    { concurrency: 2 }\n  );\n\n  const display = new StatusDisplay(`Meteor Status - ${config.app.name}`);\n\n  results.forEach((result, index) => {\n    const urlResult = urlResults[index] || {};\n    const section = display.addLine(`- ${result.host}: ${withColor(result.statusColor, result.status)}`, result.statusColor);\n\n    section.addLine(`Created at ${result.created}`);\n    section.addLine(`Restarted ${result.restartCount} times`, result.restartColor);\n\n    if (result.env) {\n      const envSection = section.addLine('ENV:');\n      result.env.forEach(envVar => {\n        envSection.addLine(`- ${envVar}`);\n      });\n    }\n\n    createPortInfoLines(result.exposedPorts, result.publishedPorts, section);\n    displayAvailability(result, urlResult, section);\n  });\n\n  display.show(overview);\n}\n"],"file":"command-handlers.js"}