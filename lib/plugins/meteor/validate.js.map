{"version":3,"sources":["../../../src/plugins/meteor/validate.js"],"names":["schema","joi","object","keys","name","string","min","required","path","port","number","type","servers","pattern","env","bool","bind","settings","deployCheckWaitTime","deployCheckPort","enableUploadProgressBar","dockerImage","docker","image","trim","imagePort","imageFrontendServer","args","array","items","prepareBundle","prepareBundleLocally","buildInstructions","stopAppDuringPrepareBundle","useBuildKit","networks","buildOptions","serverOnly","debug","cleanAfterBuild","buildLocation","mobileSettings","server","uri","allowIncompatibleUpdates","boolean","executable","ROOT_URL","regex","RegExp","MONGO_URL","log","driver","opts","volumes","nginx","clientUploadLimit","ssl","autogenerate","email","domains","crt","key","upload","and","without","or","config","addDepreciation","combineErrorDetails","VALIDATE_OPTIONS","serversExist","addLocation","details","validate","app","indexOf","push","message","meteor"],"mappings":"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","sourcesContent":["import joi from '@hapi/joi';\n\nconst schema = joi.object().keys({\n  name: joi.string().min(1).required(),\n  path: joi.string().min(1).required(),\n  port: joi.number(),\n  type: joi.string(),\n  servers: joi.object().min(1).required().pattern(\n    /[/s/S]*/,\n    joi.object().keys({\n      env: joi.object().pattern(\n        /[/s/S]*/,\n        [joi.string(), joi.number(), joi.bool()]\n      ),\n      bind: joi.string(),\n      settings: joi.string()\n    })\n  ),\n  deployCheckWaitTime: joi.number(),\n  deployCheckPort: joi.number(),\n  enableUploadProgressBar: joi.bool(),\n  dockerImage: joi.string(),\n  docker: joi.object().keys({\n    image: joi.string().trim(),\n    imagePort: joi.number(),\n    imageFrontendServer: joi.string(),\n    args: joi.array().items(joi.string()),\n    bind: joi.string().trim(),\n    prepareBundle: joi.bool(),\n    prepareBundleLocally: joi.bool(),\n    buildInstructions: joi.array().items(joi.string()),\n    stopAppDuringPrepareBundle: joi.bool(),\n    useBuildKit: joi.bool(),\n    networks: joi\n      .array()\n      .items(joi.string())\n  }),\n  buildOptions: joi.object().keys({\n    serverOnly: joi.bool(),\n    debug: joi.bool(),\n    cleanAfterBuild: joi.bool(),\n    buildLocation: joi.string(),\n    mobileSettings: joi.object(),\n    server: joi.string().uri(),\n    allowIncompatibleUpdates: joi.boolean(),\n    executable: joi.string()\n  }),\n  env: joi\n    .object()\n    .keys({\n      ROOT_URL: joi\n        .string()\n        .regex(\n          new RegExp('^(http|https)://', 'i'),\n          'valid url with \"http://\" or \"https://\"'\n        )\n        .required(),\n      MONGO_URL: joi.string()\n    })\n    .pattern(/[\\s\\S]*/, [joi.string(), joi.number(), joi.bool()]),\n  log: joi.object().keys({\n    driver: joi.string(),\n    opts: joi.object()\n  }),\n  volumes: joi.object(),\n  nginx: joi.object().keys({\n    clientUploadLimit: joi.string().trim()\n  }),\n  ssl: joi\n    .object()\n    .keys({\n      autogenerate: joi\n        .object()\n        .keys({\n          email: joi.string().email().required(),\n          domains: joi.string().required()\n        }),\n      crt: joi.string().trim(),\n      key: joi.string().trim(),\n      port: joi.number(),\n      upload: joi.boolean()\n    })\n    .and('crt', 'key')\n    .without('autogenerate', ['crt', 'key'])\n    .or('crt', 'autogenerate')\n});\n\nexport default function(\n  config,\n  {\n    addDepreciation,\n    combineErrorDetails,\n    VALIDATE_OPTIONS,\n    serversExist,\n    addLocation\n  }\n) {\n  let details = [];\n\n  details = combineErrorDetails(\n    details,\n    joi.validate(config.app, schema, VALIDATE_OPTIONS)\n  );\n  if (config.app.name && config.app.name.indexOf(' ') > -1) {\n    details.push({\n      message: 'has a space',\n      path: 'name'\n    });\n  }\n  if (\n    typeof config.app.ssl === 'object' &&\n    'autogenerate' in config.app.ssl &&\n    'PORT' in config.app.env\n  ) {\n    details.push({\n      message: 'PORT can not be set when using ssl.autogenerate',\n      path: 'env'\n    });\n  }\n  details = combineErrorDetails(\n    details,\n    serversExist(config.servers, config.app.servers)\n  );\n\n  // Depreciations\n  if (config.app.ssl) {\n    details = addDepreciation(\n      details,\n      'ssl',\n      'Use the reverse proxy instead',\n      'https://git.io/vN5tn'\n    );\n  }\n\n  if (config.app.nginx) {\n    details = addDepreciation(\n      details,\n      'nginx',\n      'Use the reverse proxy instead',\n      'https://git.io/vN5tn'\n    );\n  }\n\n  if (config.app.docker && config.app.docker.imageFrontendServer) {\n    details = addDepreciation(\n      details,\n      'docker.imageFrontendServer',\n      'Use the reverse proxy instead',\n      'https://git.io/vN5tn'\n    );\n  }\n\n  return addLocation(details, config.meteor ? 'meteor' : 'app');\n}\n"],"file":"validate.js"}