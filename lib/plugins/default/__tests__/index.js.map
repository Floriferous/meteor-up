{"version":3,"sources":["../../../../src/plugins/default/__tests__/index.js"],"names":["chai","use","chaiString","sh","config","silent","servers","require","timeout","serverInfo","mymeteor","cd","path","resolve","os","tmpdir","exec","out","code","to","equal","output","satisfy","text","indexOf","be","ssh1","ssh2","dir","mkdir","fs","existsSync","true","rm","have","entriesCount","gte"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-expressions */\nimport { before, describe, it } from 'mocha';\nimport chai, { expect } from 'chai';\nimport { countOccurences, runSSHCommand } from '../../../utils';\nimport chaiString from 'chai-string';\nimport fs from 'fs';\nimport os from 'os';\nimport path from 'path';\nimport sh from 'shelljs';\n\nchai.use(chaiString);\n\nsh.config.silent = false;\nconst servers = require('../../../../tests/fixtures/servers');\n\ndescribe('module - default', function() {\n  this.timeout(900000);\n\n  before(async () => {\n    const serverInfo = servers.mymeteor;\n    await runSSHCommand(\n      serverInfo,\n      'sudo docker rm -f $(sudo docker ps -a -q)'\n    );\n  });\n\n  describe('deploy', () => {\n    it('should deploy meteor app on \"meteor\" vm', async () => {\n      const serverInfo = servers.mymeteor;\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n      sh.exec('mup setup');\n\n      const out = sh.exec('mup deploy --cached-build');\n\n      expect(out.code).to.equal(0);\n      expect(\n        out.output\n      ).satisfy(text => {\n        if (text.indexOf('Building App Bundle Locally') > -1) {\n          return true;\n        }\n\n        return text.indexOf('Using build from previous deploy at') > -1;\n      });\n\n      expect(\n        countOccurences(\n          'Pushing Meteor App Bundle to the Server: SUCCESS',\n          out.output\n        )\n      ).to.be.equal(1);\n      expect(\n        countOccurences('Pushing the Startup Script: SUCCESS', out.output)\n      ).to.be.equal(1);\n      expect(\n        countOccurences('Sending Environment Variables: SUCCESS', out.output)\n      ).to.be.equal(1);\n      expect(countOccurences('Start Meteor: SUCCESS', out.output)).to.be.equal(\n        1\n      );\n      expect(\n        countOccurences('Verifying Deployment: SUCCESS', out.output)\n      ).to.be.equal(1);\n      const ssh1 = await runSSHCommand(\n        serverInfo,\n        'nc -z -v -w5 localhost 27017'\n      );\n      expect(ssh1.code).to.be.equal(0);\n      const ssh2 = await runSSHCommand(\n        serverInfo,\n        'curl localhost:80 && exit 0'\n      );\n      expect(ssh2.code).to.be.equal(0);\n    });\n  });\n\n  describe('init', () => {\n    it('should create \"mup.js\" and \"setting.json\" in /tmp/project-tmp', () => {\n      const dir = path.resolve(os.tmpdir(), 'project-tmp');\n      sh.mkdir(dir);\n      sh.cd(dir);\n      sh.exec('mup init');\n      expect(fs.existsSync(path.resolve(dir, 'mup.js'))).to.true;\n      expect(fs.existsSync(path.resolve(dir, 'settings.json'))).to.true;\n      sh.rm('-rf', dir);\n    });\n  });\n\n  describe('logs', () => {\n    it('should pull the logs from meteor app', () => {\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n      const out = sh.exec('mup logs --tail 2');\n      expect(out.code).to.be.equal(0);\n    });\n  });\n\n  describe('reconfig', () => {\n    it('should reconfig meteor app on \"meteor\" vm', async () => {\n      const serverInfo = servers.mymeteor;\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n      sh.exec('mup setup  && mup deploy --cached-build');\n\n      const out = sh.exec('mup reconfig');\n\n      expect(out.code).to.be.equal(0);\n      expect(\n        countOccurences('Sending Environment Variables: SUCCESS', out.output)\n      ).to.be.equal(1);\n      expect(countOccurences('Start Meteor: SUCCESS', out.output)).to.be.equal(\n        1\n      );\n      expect(\n        countOccurences('Verifying Deployment: SUCCESS', out.output)\n      ).to.be.equal(1);\n      expect(\n        (await runSSHCommand(serverInfo, 'curl localhost:80 && exit 0')).code\n      ).to.be.equal(0);\n    });\n  });\n\n  describe('restart', () => {\n    it('should restart meteor app on \"meteor\" vm', async () => {\n      const serverInfo = servers.mymeteor;\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n      sh.exec('mup setup  && mup deploy --cached-build');\n\n      const out = sh.exec('mup restart');\n\n      expect(out.code).to.be.equal(0);\n      expect(out.output).to.have.entriesCount('Stop Meteor: SUCCESS', 1);\n      expect(out.output).to.have.entriesCount('Start Meteor: SUCCESS', 1);\n      expect(\n        out.output\n      ).to.have.entriesCount('Verifying Deployment: SUCCESS', 1);\n      expect(\n        (await runSSHCommand(serverInfo, 'curl localhost:80 && exit 0')).code\n      ).to.be.equal(0, 'Curl exit code');\n    });\n  });\n\n  describe('setup', () => {\n    it('should setup \"meteor\" vm', async () => {\n      const serverInfo = servers.mymeteor;\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n\n      const out = sh.exec('mup setup');\n\n      expect(out.code).to.be.equal(0);\n      expect(countOccurences('Setup Docker: SUCCESS', out.output)).to.be.equal(\n        1\n      );\n      expect(\n        countOccurences('Setup Environment: SUCCESS', out.output)\n      ).to.be.equal(2);\n      expect(countOccurences('Start Mongo: SUCCESS', out.output)).to.be.equal(\n        1\n      );\n      expect(\n        (await runSSHCommand(serverInfo, 'nc -z -v -w5 localhost 27017')).code\n      ).to.be.equal(0);\n    });\n  });\n\n  describe('start', () => {\n    it('should start meteor app on \"meteor\" vm', async () => {\n      const serverInfo = servers.mymeteor;\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n      sh.exec('mup setup  && mup meteor push --cached-build && mup meteor envconfig');\n\n      const out = sh.exec('mup start');\n\n      expect(out.code).to.be.equal(0);\n      expect(countOccurences('Start Meteor: SUCCESS', out.output)).to.be.equal(\n        1\n      );\n      expect(\n        countOccurences('Verifying Deployment: SUCCESS', out.output)\n      ).to.be.equal(1);\n      expect(\n        (await runSSHCommand(serverInfo, 'curl localhost:80 && exit 0')).code\n      ).to.be.equal(0);\n    });\n  });\n\n  describe('stop', () => {\n    it('should stop meteor app on \"meteor\" vm', async () => {\n      const serverInfo = servers.mymeteor;\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n      sh.exec('mup setup  && mup deploy --cached-build');\n\n      const out = sh.exec('mup stop');\n\n      expect(out.code).to.be.equal(0);\n      expect(countOccurences('Stop Meteor: SUCCESS', out.output)).to.be.equal(\n        1\n      );\n      expect(\n        (await runSSHCommand(serverInfo, 'curl localhost:80 && exit 0')).code\n      ).to.be.equal(7);\n    });\n  });\n\n  describe('syslog', () => {\n    const serverInfo = servers.mymeteor;\n\n    it('should write meteor logs to syslog on \"meteor\" vm', async () => {\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-2'));\n\n      sh.exec('mup setup && mup deploy --cached-build');\n      const out = await runSSHCommand(\n        serverInfo,\n        'sudo tail -n 100 /var/log/syslog'\n      );\n\n      expect(out.code).to.be.equal(0);\n      expect(\n        countOccurences('=> Starting meteor app on port 3000', out.output)\n      ).gte(1);\n    });\n  });\n});\n"],"file":"index.js"}