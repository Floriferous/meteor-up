{"version":3,"sources":["../src/server-info.js"],"names":["log","parseJSONArray","stdout","code","output","split","join","result","JSON","parse","Array","e","builtInParsers","json","jsonOutput","slice","indexOf","jsonArray","_collectors","swarm","command","parser","swarmNodes","swarmToken","trim","images","prefix","suffix","codeSeperator","generateVarCommand","name","generateScript","collectors","script","Object","keys","forEach","key","collector","seperateCollectors","shift","map","collectorOutput","commandOutput","parseInt","parseCollectorOutput","createHostResult","collectorData","host","serverName","_host","_serverName","data","getServerInfo","server","then","hostResult","catch","err","console","serverInfo","servers","concurrency","length","serverResults","reduce","serverResult"],"mappings":";;;;;;;;;;;;AAAA;;AACA;;AACA;;;;AAEA,MAAMA,GAAG,GAAG,oBAAM,iBAAN,CAAZ;;AAEA,SAASC,cAAT,CAAwBC,MAAxB,EAAgCC,IAAhC,EAAsC;AACpC,MAAIA,IAAI,KAAK,CAAb,EAAgB;AACd,QAAI;AACF,UAAIC,MAAM,GAAGF,MAAM,CAACG,KAAP,CAAa,IAAb,EAAmBC,IAAnB,CAAwB,GAAxB,CAAb;AAEAF,MAAAA,MAAM,GAAI,IAAGA,MAAO,GAApB;AAEA,YAAMG,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWL,MAAX,CAAf;;AAEA,UAAI,EAAEG,MAAM,YAAYG,KAApB,CAAJ,EAAgC;AAC9B,eAAO,CAACH,MAAD,CAAP;AACD;;AAED,aAAOA,MAAP;AACD,KAZD,CAYE,OAAOI,CAAP,EAAU;AACV,aAAO,IAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD;;AAEM,MAAMC,cAAc,GAAG;AAC5BC,EAAAA,IAAI,CAACX,MAAD,EAASC,IAAT,EAAe;AACjB,QAAIA,IAAI,KAAK,CAAb,EAAgB;AACd,UAAI;AACF;AACA;AACA,cAAMW,UAAU,GAAGZ,MAAM,CAACa,KAAP,CAAab,MAAM,CAACc,OAAP,CAAe,GAAf,CAAb,CAAnB;AAEA,eAAOR,IAAI,CAACC,KAAL,CAAWK,UAAX,CAAP;AACD,OAND,CAME,OAAOH,CAAP,EAAU;AACV,eAAO,IAAP;AACD;AACF;;AAED,WAAO,IAAP;AACD,GAf2B;;AAgB5BM,EAAAA,SAAS,EAAEhB;AAhBiB,CAAvB;;AAmBA,MAAMiB,WAAW,GAAG;AACzBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,OAAO,EAAE,+CADJ;AAELC,IAAAA,MAAM,EAAET,cAAc,CAACC;AAFlB,GADkB;AAKzBS,EAAAA,UAAU,EAAE;AACVF,IAAAA,OAAO,EAAE,4EADC;AAEVC,IAAAA,MAAM,EAAEpB;AAFE,GALa;AASzBsB,EAAAA,UAAU,EAAE;AACVH,IAAAA,OAAO,EAAE,wCADC;;AAEVC,IAAAA,MAAM,CAACnB,MAAD,EAASC,IAAT,EAAe;AACnB,UAAIA,IAAI,KAAK,CAAT,IAAcD,MAAM,CAACc,OAAP,CAAe,gBAAf,MAAqC,CAAC,CAAxD,EAA2D;AACzD,eAAOd,MAAM,CAACsB,IAAP,EAAP;AACD;;AAED,aAAO,IAAP;AACD;;AARS,GATa;AAmBzBC,EAAAA,MAAM,EAAE;AACNL,IAAAA,OAAO,EAAE,4CADH;AAENC,IAAAA,MAAM,EAAEpB;AAFF;AAnBiB,CAApB;;AAyBP,MAAMyB,MAAM,GAAG,oCAAf;AACA,MAAMC,MAAM,GAAG,oCAAf;AACA,MAAMC,aAAa,GAAG,qBAAtB;;AAEA,SAASC,kBAAT,CAA4BC,IAA5B,EAAkCV,OAAlC,EAA2C;AACzC,SAAQ;UACAM,MAAO,GAAEI,IAAK,GAAEH,MAAO;IAC7BP,OAAQ;UACFQ,aAAc;;GAHtB;AAMD;;AAED,SAASG,cAAT,CAAwBC,UAAxB,EAAoC;AAClC,MAAIC,MAAM,GAAG,EAAb;AAEAC,EAAAA,MAAM,CAACC,IAAP,CAAYH,UAAZ,EAAwBI,OAAxB,CAAgCC,GAAG,IAAI;AACrC,UAAMC,SAAS,GAAGN,UAAU,CAACK,GAAD,CAA5B;AAEAJ,IAAAA,MAAM,IAAIJ,kBAAkB,CAACQ,GAAD,EAAMC,SAAS,CAAClB,OAAhB,CAA5B;AACD,GAJD;AAMA,SAAOa,MAAP;AACD;;AAEM,SAASM,kBAAT,CAA4BnC,MAA5B,EAAoC;AACzC,QAAM4B,UAAU,GAAG5B,MAAM,CAACC,KAAP,CAAaqB,MAAb,CAAnB;AAEAM,EAAAA,UAAU,CAACQ,KAAX;AAEA,SAAOR,UAAU,CAACS,GAAX,CAAeC,eAAe,IAAI;AACvC,UAAMZ,IAAI,GAAGY,eAAe,CAACrC,KAAhB,CAAsBsB,MAAtB,EAA8B,CAA9B,CAAb;AACA,UAAMgB,aAAa,GAAGD,eAAe,CAClCrC,KADmB,CACbsB,MADa,EACL,CADK,EAEnBtB,KAFmB,CAEbuB,aAFa,EAEE,CAFF,CAAtB;AAIA,WAAO;AACLE,MAAAA,IAAI,EAAEA,IAAI,CAACN,IAAL,EADD;AAELpB,MAAAA,MAAM,EAAEuC,aAAa,CAACnB,IAAd,EAFH;AAGLrB,MAAAA,IAAI,EAAEyC,QAAQ,CAACF,eAAe,CAACrC,KAAhB,CAAsBuB,aAAtB,EAAqC,CAArC,EAAwCJ,IAAxC,EAAD,EAAiD,EAAjD;AAHT,KAAP;AAKD,GAXM,CAAP;AAYD;;AAEM,SAASqB,oBAAT,CAA8Bf,IAA9B,EAAoC1B,MAApC,EAA4CD,IAA5C,EAAkD6B,UAAlD,EAA8D;AACnE,MAAI,OAAOA,UAAU,CAACF,IAAD,CAAV,CAAiBT,MAAxB,KAAmC,QAAvC,EAAiD;AAC/C,WAAOT,cAAc,CAACoB,UAAU,CAACF,IAAD,CAAV,CAAiBT,MAAlB,CAAd,CAAwCjB,MAAxC,EAAgDD,IAAhD,CAAP;AACD;;AAED,SAAO6B,UAAU,CAACF,IAAD,CAAV,CAAiBT,MAAjB,CAAwBjB,MAAxB,EAAgCD,IAAhC,CAAP;AACD;;AAEM,SAAS2C,gBAAT,CAA0BC,aAA1B,EAAyCC,IAAzC,EAA+CC,UAA/C,EAA2DjB,UAA3D,EAAuE;AAC5E,QAAMzB,MAAM,GAAG;AAAE2C,IAAAA,KAAK,EAAEF,IAAT;AAAeG,IAAAA,WAAW,EAAEF;AAA5B,GAAf;AAEAF,EAAAA,aAAa,CAACX,OAAd,CAAsBgB,IAAI,IAAI;AAC5B7C,IAAAA,MAAM,CAAC6C,IAAI,CAACtB,IAAN,CAAN,GAAoBe,oBAAoB,CACtCO,IAAI,CAACtB,IADiC,EAEtCsB,IAAI,CAAChD,MAFiC,EAGtCgD,IAAI,CAACjD,IAHiC,EAItC6B,UAJsC,CAAxC;AAMD,GAPD;AASA,SAAOzB,MAAP;AACD;;AAEM,SAAS8C,aAAT,CAAuBC,MAAvB,EAA+BtB,UAA/B,EAA2C;AAChD,QAAMZ,OAAO,GAAGW,cAAc,CAACC,UAAD,CAA9B;AAEA,SAAO,0BAAcsB,MAAd,EAAsBlC,OAAtB,EACJmC,IADI,CACChD,MAAM,IAAI;AACd,UAAMwC,aAAa,GAAGR,kBAAkB,CAAChC,MAAM,CAACH,MAAR,CAAxC;AACA,UAAMoD,UAAU,GAAGV,gBAAgB,CACjCC,aADiC,EAEjCO,MAAM,CAACN,IAF0B,EAGjCM,MAAM,CAACxB,IAH0B,EAIjCE,UAJiC,CAAnC;AAOA,WAAOwB,UAAP;AACD,GAXI,EAYJC,KAZI,CAYEC,GAAG,IAAI;AACZC,IAAAA,OAAO,CAAC3D,GAAR,CAAY0D,GAAZ,EAAiBJ,MAAjB;AACD,GAdI,CAAP;AAeD;;AAEc,SAASM,UAAT,CAAoBC,OAApB,EAA6B7B,UAAU,GAAGd,WAA1C,EAAuD;AACpElB,EAAAA,GAAG,CAAC,UAAD,CAAH;AAEA,SAAO,mBACL6D,OADK,EAELP,MAAM,IAAID,aAAa,CAACC,MAAD,EAAStB,UAAT,CAFlB,EAGL;AAAE8B,IAAAA,WAAW,EAAE5B,MAAM,CAACC,IAAP,CAAY0B,OAAZ,EAAqBE;AAApC,GAHK,EAILR,IAJK,CAIAS,aAAa,IAAI;AACtBhE,IAAAA,GAAG,CAAC,UAAD,CAAH;AAEA,WAAOgE,aAAa,CAACC,MAAd,CAAqB,CAAC1D,MAAD,EAAS2D,YAAT,KAA0B;AACpD3D,MAAAA,MAAM,CAAC2D,YAAY,CAACf,WAAd,CAAN,GAAmCe,YAAnC;AAEA,aAAO3D,MAAP;AACD,KAJM,EAIJ,EAJI,CAAP;AAKD,GAZM,CAAP;AAaD","sourcesContent":["import debug from 'debug';\nimport { map } from 'bluebird';\nimport { runSSHCommand } from './utils';\n\nconst log = debug('mup:server-info');\n\nfunction parseJSONArray(stdout, code) {\n  if (code === 0) {\n    try {\n      let output = stdout.split('\\n').join(',');\n\n      output = `[${output}]`;\n\n      const result = JSON.parse(output);\n\n      if (!(result instanceof Array)) {\n        return [result];\n      }\n\n      return result;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  return null;\n}\n\nexport const builtInParsers = {\n  json(stdout, code) {\n    if (code === 0) {\n      try {\n        // Some commands, such as Docker, will sometimes show some\n        // messages before the JSON\n        const jsonOutput = stdout.slice(stdout.indexOf('{'));\n\n        return JSON.parse(jsonOutput);\n      } catch (e) {\n        return null;\n      }\n    }\n\n    return null;\n  },\n  jsonArray: parseJSONArray\n};\n\nexport const _collectors = {\n  swarm: {\n    command: 'sudo docker info --format \\'{{json .Swarm}}\\'',\n    parser: builtInParsers.json\n  },\n  swarmNodes: {\n    command: 'sudo docker node inspect $(sudo docker node ls -q) --format \\'{{json .}}\\'',\n    parser: parseJSONArray\n  },\n  swarmToken: {\n    command: 'sudo docker swarm join-token worker -q',\n    parser(stdout, code) {\n      if (code === 0 && stdout.indexOf('Error response') === -1) {\n        return stdout.trim();\n      }\n\n      return null;\n    }\n  },\n  images: {\n    command: 'sudo docker images --format \\'{{json .}}\\'',\n    parser: parseJSONArray\n  }\n};\n\nconst prefix = '<============mup-var-start========';\nconst suffix = '================mup-var-stop=====>';\nconst codeSeperator = 'mup-var-code=======';\n\nfunction generateVarCommand(name, command) {\n  return `\n  echo \"${prefix}${name}${suffix}\"\n  ${command} 2>&1\n  echo \"${codeSeperator}\"\n  echo $?\n  `;\n}\n\nfunction generateScript(collectors) {\n  let script = '';\n\n  Object.keys(collectors).forEach(key => {\n    const collector = collectors[key];\n\n    script += generateVarCommand(key, collector.command);\n  });\n\n  return script;\n}\n\nexport function seperateCollectors(output) {\n  const collectors = output.split(prefix);\n\n  collectors.shift();\n\n  return collectors.map(collectorOutput => {\n    const name = collectorOutput.split(suffix)[0];\n    const commandOutput = collectorOutput\n      .split(suffix)[1]\n      .split(codeSeperator)[0];\n\n    return {\n      name: name.trim(),\n      output: commandOutput.trim(),\n      code: parseInt(collectorOutput.split(codeSeperator)[1].trim(), 10)\n    };\n  });\n}\n\nexport function parseCollectorOutput(name, output, code, collectors) {\n  if (typeof collectors[name].parser === 'string') {\n    return builtInParsers[collectors[name].parser](output, code);\n  }\n\n  return collectors[name].parser(output, code);\n}\n\nexport function createHostResult(collectorData, host, serverName, collectors) {\n  const result = { _host: host, _serverName: serverName };\n\n  collectorData.forEach(data => {\n    result[data.name] = parseCollectorOutput(\n      data.name,\n      data.output,\n      data.code,\n      collectors\n    );\n  });\n\n  return result;\n}\n\nexport function getServerInfo(server, collectors) {\n  const command = generateScript(collectors);\n\n  return runSSHCommand(server, command)\n    .then(result => {\n      const collectorData = seperateCollectors(result.output);\n      const hostResult = createHostResult(\n        collectorData,\n        server.host,\n        server.name,\n        collectors\n      );\n\n      return hostResult;\n    })\n    .catch(err => {\n      console.log(err, server);\n    });\n}\n\nexport default function serverInfo(servers, collectors = _collectors) {\n  log('starting');\n\n  return map(\n    servers,\n    server => getServerInfo(server, collectors),\n    { concurrency: Object.keys(servers).length }\n  ).then(serverResults => {\n    log('finished');\n\n    return serverResults.reduce((result, serverResult) => {\n      result[serverResult._serverName] = serverResult;\n\n      return result;\n    }, {});\n  });\n}\n"],"file":"server-info.js"}