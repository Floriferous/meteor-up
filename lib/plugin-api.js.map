{"version":3,"sources":["../src/plugin-api.js"],"names":["resolvePath","moduleNotFoundIsPath","utils","log","PluginAPI","constructor","base","filteredArgs","program","handlers","hookName","messagePrefix","hookHandler","localCommand","console","_runHookScript","method","nodemiral","e","_commandErrorHandler","remoteCommand","getConfig","servers","name","chalk","yellow","hooks","hookList","_runHooks","commandName","firstCommand","commandHistory","length","Error","commands","push","_runPreHooks","handler","_runPostHooks","then","_cleanupSessions","config","path","dirname","args","_origionalConfig","settings","sessions","_enabledSessions","split","configPath","join","settingsPath","verbose","profileTasks","process","env","MUP_PROFILE_TASKS","validationErrors","getDockerLogs","runSSHCommand","forwardPort","_createSSHOptions","createSSHOptions","statusHelpers","StatusDisplay","parseDockerInfo","tasks","getArgs","getBasePath","getVerbose","getOptions","hasMeteorPackage","contents","fs","readFileSync","meteor","toString","regex","RegExp","test","runTaskList","list","opts","showDuration","validateConfig","logProblems","errors","depreciations","problems","_normalizeConfig","app","Object","assign","type","validate","require","cache","resolve","code","error","red","exit","scrubConfig","getSettings","filePath","getSettingsFromPath","forEach","text","message","setConfig","newConfig","script","childProcess","execSync","cwd","stdio","exitCode","nodemiralHistory","Array","stack","solution","getServerInfo","selectedServers","collectors","_cachedServerInfo","serverConfig","keys","map","serverName","result","serverInfoStale","getSessions","modules","_pickSessions","getSessionsForServers","_loadSessions","getManagerSession","currentManagers","swarmInfo","plugins","moduleName","moduleConfig","hasOwnProperty","indexOf","info","auth","username","keepAlive","ssh","sshAgent","SSH_AUTH_SOCK","keepaliveInterval","keepaliveCountMax","pem","password","existsSync","agent","session","host","key","close","swarmEnabled","swarm","enabled","swarmUtils","desiredManagers","nodes","findNodes","nodeIdsToServer","desiredLabels","labels","currentLabels","clusters","findClusters","showClusters","nodeIDs","dockerServiceInfo","serviceName","manager","serviceInfo","JSON","parse","output"],"mappings":"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","sourcesContent":["import * as swarmUtils from './swarm-utils';\nimport * as tasks from './tasks';\nimport * as utils from './utils';\nimport configValidator, { showDepreciations, showErrors } from './validate/index';\nimport { hooks, runRemoteHooks } from './hooks';\nimport { parseDockerInfo, StatusDisplay } from './status';\nimport chalk from 'chalk';\nimport childProcess from 'child_process';\nimport { cloneDeep } from 'lodash';\nimport { commands } from './commands';\nimport debug from 'debug';\nimport fs from 'fs';\nimport { getOptions } from './swarm-options';\nimport nodemiral from '@zodern/nodemiral';\nimport parseJson from 'parse-json';\nimport path from 'path';\nimport { runConfigPreps } from './prepare-config';\nimport { scrubConfig } from './scrub-config';\nimport serverInfo from './server-info';\n\nconst { resolvePath, moduleNotFoundIsPath } = utils;\nconst log = debug('mup:api');\n\nexport default class PluginAPI {\n  constructor(base, filteredArgs, program) {\n    this.base = program.config ? path.dirname(program.config) : base;\n    this.args = filteredArgs;\n    this._origionalConfig = null;\n    this.config = null;\n    this.settings = null;\n    this.sessions = null;\n    this._enabledSessions = program.servers ? program.servers.split(' ') : [];\n    this.configPath = program.config ? resolvePath(program.config) : path.join(this.base, 'mup.js');\n    this.settingsPath = program.settings;\n    this.verbose = program.verbose;\n    this.program = program;\n    this.commandHistory = [];\n    this.profileTasks = process.env.MUP_PROFILE_TASKS === 'true';\n\n    this.validationErrors = [];\n\n    this.resolvePath = utils.resolvePath;\n    this.getDockerLogs = utils.getDockerLogs;\n    this.runSSHCommand = utils.runSSHCommand;\n    this.forwardPort = utils.forwardPort;\n    this._createSSHOptions = utils.createSSHOptions;\n\n    this.statusHelpers = {\n      StatusDisplay,\n      parseDockerInfo\n    };\n\n    this.tasks = tasks;\n  }\n\n  getArgs() {\n    return this.args;\n  }\n\n  getBasePath() {\n    return this.base;\n  }\n\n  getVerbose() {\n    return this.verbose;\n  }\n\n  getOptions() {\n    return this.program;\n  }\n\n  hasMeteorPackage(name) {\n    // Check if app is using the package\n    try {\n      const contents = fs\n        .readFileSync(resolvePath(this.getBasePath(), this.getConfig().meteor.path, '.meteor/versions'))\n        .toString();\n      // Looks for \"package-name@\" in the beginning of a\n      // line or at the start of the file\n      const regex = new RegExp(`(^|\\\\s)${name}@`, 'm');\n\n      return regex.test(contents);\n    } catch (e) {\n      console.log(`Unable to load file ${resolvePath(this.getBasePath(), this.getConfig().meteor.path, '.meteor/versions')}`);\n\n      return false;\n    }\n  }\n\n  runTaskList(list, sessions, opts = {}) {\n    if (!('verbose' in opts)) {\n      opts.verbose = this.verbose;\n    }\n    if (!('showDuration' in opts)) {\n      opts.showDuration = this.profileTasks;\n    }\n\n    return utils.runTaskList(list, sessions, opts);\n  }\n\n  validateConfig(configPath, logProblems) {\n    // Only print errors once.\n    if (this.validationErrors.length > 0) {\n      return this.validationErrors;\n    }\n    const config = this.getConfig();\n    const {\n      errors,\n      depreciations\n    } = configValidator(config, this._origionalConfig);\n    const problems = [...errors, ...depreciations];\n\n    if (problems.length > 0 && logProblems) {\n      console.log(`loaded config from ${configPath}`);\n      console.log('');\n\n      if (errors.length) {\n        showErrors(errors);\n      }\n\n      if (depreciations.length) {\n        showDepreciations(depreciations);\n      }\n\n      console.log(\n        'Read the docs and view example configs at'\n      );\n      console.log('    http://meteor-up.com/docs');\n      console.log('');\n    }\n\n    this.validationErrors = problems;\n\n    return problems;\n  }\n  _normalizeConfig(config) {\n    if (typeof config !== 'object') {\n      return config;\n    }\n    if (config.meteor && typeof config.app !== 'object') {\n      config.app = Object.assign({}, config.meteor);\n      config.app.type = 'meteor';\n    } else if (typeof config.app === 'object' && !('type' in config.app)) {\n      config.app.type = 'meteor';\n    }\n\n    return runConfigPreps(config);\n  }\n  getConfig(validate = true) {\n    if (!this.config) {\n      try {\n        delete require.cache[require.resolve(this.configPath)];\n        // eslint-disable-next-line global-require\n        this.config = require(this.configPath);\n        this._origionalConfig = cloneDeep(this.config);\n      } catch (e) {\n        if (!validate) {\n          return {};\n        }\n        if (e.code === 'MODULE_NOT_FOUND' && moduleNotFoundIsPath(e, this.configPath)) {\n          console.error('\"mup.js\" file not found at');\n          console.error(`  ${this.configPath}`);\n          console.error('Run \"mup init\" to create it.');\n        } else {\n          console.error(chalk.red('Error loading config file:'));\n          console.error(e);\n        }\n        process.exit(1);\n      }\n      this.config = this._normalizeConfig(this.config);\n\n      this.validateConfig(this.configPath, validate);\n    }\n\n    return this.config;\n  }\n\n  scrubConfig() {\n    const config = this.getConfig();\n\n    return scrubConfig(config);\n  }\n\n  getSettings() {\n    if (!this.settings) {\n      let filePath;\n\n      if (this.settingsPath) {\n        filePath = resolvePath(this.settingsPath);\n      } else {\n        filePath = path.join(this.base, 'settings.json');\n      }\n      this.settings = this.getSettingsFromPath(filePath);\n    }\n\n    return this.settings;\n  }\n\n  getSettingsFromPath(settingsPath) {\n    const filePath = resolvePath(settingsPath);\n    let settings;\n\n    try {\n      settings = fs.readFileSync(filePath).toString();\n    } catch (e) {\n      console.log(`Unable to load settings.json at ${filePath}`);\n      if (e.code !== 'ENOENT') {\n        console.log(e);\n      } else {\n        [\n          'It does not exist.',\n          '',\n          'You can create the file with \"mup init\" or add the option',\n          '\"--settings path/to/settings.json\" to load it from a',\n          'different location.'\n        ].forEach(text => console.log(text));\n      }\n      process.exit(1);\n    }\n    try {\n      settings = parseJson(settings);\n    } catch (e) {\n      console.log('Error parsing settings file:');\n      console.log(e.message);\n\n      process.exit(1);\n    }\n\n    return settings;\n  }\n\n  setConfig(newConfig) {\n    this.config = newConfig;\n  }\n\n  _runHookScript(script) {\n    try {\n      childProcess.execSync(script, {\n        cwd: this.getBasePath(),\n        stdio: 'inherit'\n      });\n    } catch (e) {\n      console.log('Hook failed.');\n      process.exit(1);\n    }\n  }\n  _runHooks = async function(handlers, hookName) {\n    const messagePrefix = `> Running hook ${hookName}`;\n\n    for (const hookHandler of handlers) {\n      if (hookHandler.localCommand) {\n        console.log(`${messagePrefix} \"${hookHandler.localCommand}\"`);\n        this._runHookScript(hookHandler.localCommand);\n      }\n      if (typeof hookHandler.method === 'function') {\n        try {\n          await hookHandler.method(this, nodemiral);\n        } catch (e) {\n          this._commandErrorHandler(e);\n        }\n      }\n      if (hookHandler.remoteCommand) {\n        console.log(\n          `${messagePrefix} remote command \"${hookHandler.remoteCommand}\"`\n        );\n        await runRemoteHooks(\n          this.getConfig().servers,\n          hookHandler.remoteCommand\n        );\n      }\n    }\n  }\n  _runPreHooks = async function(name) {\n    const hookName = `pre.${name}`;\n\n    if (this.program['show-hook-names']) {\n      console.log(chalk.yellow(`Hook: ${hookName}`));\n    }\n\n    if (hookName in hooks) {\n      const hookList = hooks[hookName];\n\n      await this._runHooks(hookList, name);\n    }\n  };\n  _runPostHooks = async function(commandName) {\n    const hookName = `post.${commandName}`;\n\n    if (this.program['show-hook-names']) {\n      console.log(chalk.yellow(`Hook: ${hookName}`));\n    }\n\n    if (hookName in hooks) {\n      const hookList = hooks[hookName];\n\n      await this._runHooks(hookList, hookName);\n    }\n  };\n  _commandErrorHandler(e) {\n    log('_commandErrorHandler');\n    process.exitCode = 1;\n\n    // Only show error when not from nodemiral\n    // since nodemiral would have already shown the error\n    if (!(e.nodemiralHistory instanceof Array)) {\n      log('_commandErrorHandler: nodemiral error');\n      console.error(e.stack || e);\n    }\n\n    if (e.solution) {\n      console.log(chalk.yellow(e.solution));\n    }\n\n    process.exit(1);\n  }\n  runCommand = async function(name) {\n    const firstCommand = this.commandHistory.length === 0;\n\n    if (!name) {\n      throw new Error('Command name is required');\n    }\n\n    if (!(name in commands)) {\n      throw new Error(`Unknown command name: ${name}`);\n    }\n\n    this.commandHistory.push({ name });\n\n    await this._runPreHooks(name);\n\n    try {\n      log('Running command', name);\n      await commands[name].handler(this, nodemiral);\n    } catch (e) {\n      this._commandErrorHandler(e);\n    }\n\n    await this._runPostHooks(name).then(() => {\n      // The post hooks for the first command should be the last thing run\n      if (firstCommand) {\n        this._cleanupSessions();\n      }\n    });\n  }\n\n  async getServerInfo(selectedServers, collectors) {\n    if (this._cachedServerInfo && !collectors) {\n      return this._cachedServerInfo;\n    }\n    const serverConfig = this.getConfig().servers;\n\n    const servers = (\n      selectedServers || Object.keys(this.getConfig().servers)\n    ).map(serverName => ({\n      ...serverConfig[serverName],\n      name: serverName\n    }));\n\n    if (!collectors) {\n      console.log('');\n      console.log('=> Collecting Docker information');\n    }\n\n    const result = await serverInfo(servers, collectors);\n\n    if (!collectors) {\n      this._cachedServerInfo = result;\n    }\n\n    return result;\n  }\n\n  serverInfoStale() {\n    this._cachedServerInfo = null;\n  }\n\n  getSessions(modules = []) {\n    const sessions = this._pickSessions(modules);\n\n    return Object.keys(sessions).map(name => sessions[name]);\n  }\n\n  getSessionsForServers(servers = []) {\n    if (!this.sessions) {\n      this._loadSessions();\n    }\n\n    return servers.map(name => this.sessions[name]);\n  }\n\n  async getManagerSession() {\n    const { currentManagers } = await this.swarmInfo();\n\n    return this.getSessionsForServers(currentManagers)[0];\n  }\n\n  _pickSessions(plugins = []) {\n    if (!this.sessions) {\n      this._loadSessions();\n    }\n\n    const sessions = {};\n\n    plugins.forEach(moduleName => {\n      const moduleConfig = this.getConfig()[moduleName];\n\n      if (!moduleConfig) {\n        return;\n      }\n\n      for (const name in moduleConfig.servers) {\n        if (!moduleConfig.servers.hasOwnProperty(name)) {\n          continue;\n        }\n\n        if (this.sessions[name]) {\n          sessions[name] = this.sessions[name];\n        }\n      }\n    });\n\n    return sessions;\n  }\n\n  _loadSessions() {\n    const config = this.getConfig();\n\n    this.sessions = {};\n\n    // `mup.servers` contains login information for servers\n    // Use this information to create nodemiral sessions.\n    for (const name in config.servers) {\n      if (!config.servers.hasOwnProperty(name)) {\n        continue;\n      }\n\n      if (\n        this._enabledSessions.length > 0 &&\n        this._enabledSessions.indexOf(name) === -1\n      ) {\n        continue;\n      }\n\n      const info = config.servers[name];\n      const auth = {\n        username: info.username\n      };\n      const opts = {\n        keepAlive: true,\n        ssh: info.opts || {}\n      };\n\n      const sshAgent = process.env.SSH_AUTH_SOCK;\n\n      opts.ssh.keepaliveInterval = opts.ssh.keepaliveInterval || 1000 * 28;\n      opts.ssh.keepaliveCountMax = opts.ssh.keepaliveCountMax || 12;\n\n      if (info.pem) {\n        try {\n          auth.pem = fs.readFileSync(resolvePath(info.pem), 'utf8');\n        } catch (e) {\n          console.error(`Unable to load pem at \"${resolvePath(info.pem)}\"`);\n          console.error(`for server \"${name}\"`);\n          if (e.code !== 'ENOENT') {\n            console.log(e);\n          }\n          process.exit(1);\n        }\n      } else if (info.password) {\n        auth.password = info.password;\n      } else if (sshAgent && fs.existsSync(sshAgent)) {\n        opts.ssh.agent = sshAgent;\n      } else {\n        console.error(\n          \"error: server %s doesn't have password, ssh-agent or pem\",\n          name\n        );\n        process.exit(1);\n      }\n\n      const session = nodemiral.session(info.host, auth, opts);\n\n      this.sessions[name] = session;\n    }\n  }\n\n  _cleanupSessions() {\n    log('cleaning up sessions');\n    if (!this.sessions) {\n      return;\n    }\n\n    Object.keys(this.sessions).forEach(key => {\n      this.sessions[key].close();\n    });\n  }\n\n  swarmEnabled() {\n    const config = this.getConfig();\n\n    return config.swarm && config.swarm.enabled;\n  }\n\n  async swarmInfo() {\n    const info = await this.getServerInfo();\n    const currentManagers = swarmUtils.currentManagers(info);\n    const desiredManagers = swarmUtils.desiredManagers(this.getConfig(), info);\n    const nodes = swarmUtils.findNodes(info);\n    const nodeIdsToServer = swarmUtils.nodeIdsToServer(info);\n    const desiredLabels = getOptions(this.getConfig()).labels;\n    const currentLabels = swarmUtils.currentLabels(info);\n    const clusters = swarmUtils.findClusters(info);\n\n    if (Object.keys(clusters).length > 1) {\n      swarmUtils.showClusters(clusters, nodeIdsToServer);\n\n      const error = new Error('multiple-clusters');\n\n      error.solution = 'The servers in your config are in multiple swarm clusters. Any servers already in a swarm cluster should be in the same cluster. Look above for the list of clusters.';\n      throw error;\n    }\n\n    return {\n      currentManagers,\n      desiredManagers,\n      nodes,\n      nodeIDs: nodeIdsToServer,\n      desiredLabels,\n      currentLabels\n    };\n  }\n\n  async dockerServiceInfo(serviceName) {\n    const manager = await this.getManagerSession();\n\n    if (!manager) {\n      const error = new Error('no-manager');\n\n      error.solution = 'Enable swarm in your config and run \"mup setup\"';\n      throw error;\n    }\n\n    const result = await this.runSSHCommand(manager, `sudo docker service inspect ${serviceName}`);\n    let serviceInfo = null;\n\n    try {\n      [serviceInfo] = JSON.parse(result.output);\n    } catch (e) {\n      // empty\n    }\n\n    return serviceInfo;\n  }\n}\n"],"file":"plugin-api.js"}